{"version":3,"file":"module.js","mappings":"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","sources":["webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_Symbol.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_apply.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_arrayLikeKeys.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseGetTag.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseIsArguments.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseIsNative.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseIsTypedArray.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseKeysIn.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseRest.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseSetToString.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseTimes.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_baseUnary.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_coreJsData.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_defineProperty.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_freeGlobal.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_getNative.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_getRawTag.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_getValue.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_isIndex.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_isIterateeCall.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_isMasked.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_isPrototype.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_nativeKeysIn.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_nodeUtil.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_objectToString.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_overRest.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_root.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_setToString.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_shortOut.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/_toSource.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/constant.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/defaults.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/eq.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/identity.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isArguments.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isArray.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isArrayLike.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isBuffer.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isFunction.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isLength.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isObject.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isObjectLike.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/isTypedArray.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/keysIn.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/../node_modules/lodash/stubFalse.js","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/external amd \"@grafana/data\"","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/external amd \"@grafana/runtime\"","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/external amd \"@grafana/ui\"","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/external amd \"lodash\"","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/external amd \"react\"","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/external amd \"rxjs\"","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/webpack/bootstrap","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/webpack/runtime/compat get default export","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/webpack/runtime/define property getters","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/webpack/runtime/global","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/webpack/runtime/make namespace object","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/webpack/runtime/node module decorator","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/./types.ts","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/./datasource.ts","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/./components/VariableQueryEditor.tsx","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/./module.ts","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/./components/ConfigEditor.tsx","webpack://industrialedgeitaly-industrialedgeiihessentials-datasource/./components/QueryEditor.tsx"],"sourcesContent":["var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","var baseRest = require('./_baseRest'),\n    eq = require('./eq'),\n    isIterateeCall = require('./_isIterateeCall'),\n    keysIn = require('./keysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nmodule.exports = defaults;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__7781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2007__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","import { DataSourceJsonData, SelectableValue } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\nexport interface MyQuery extends DataQuery {\n  from: string;\n  to: string;\n  order: string;\n  variablesNamesList: string[];\n  variablesOptions: Array<SelectableValue<string>>;\n  aggregateModesList: string[];\n  aliasesList: string[];\n  aggregateTime: string;\n  where: MyQueryWhere;\n  variablesNamesListOptions: Array<SelectableValue<string>>;\n}\n\nexport const DEFAULT_QUERY: Partial<MyQuery> = {\n  from: '${__from:date}',\n  to: '${__to:date}',\n  order: 'Ascending',\n  variablesNamesList: [''],\n  variablesOptions: [],\n  aggregateModesList: ['None'],\n  aliasesList: [''],\n  aggregateTime: 'None',\n  where: { items: [], operators: [] },\n  variablesNamesListOptions: []\n};\n\nexport type MyQueryWhere = {\n  items: MyQueryWhereItem[],\n  operators: whereOperatorType[]\n}\n\nexport type MyQueryWhereItem = {\n  element1: string;\n  comparator: whereComparatorType;\n  element2: string;\n};\n\nexport interface MyVariableQuery {\n  from: string;\n  to: string;\n  order: string;\n  variablesNamesList: string[];\n  variablesOptions: Array<SelectableValue<string>>;\n  aggregateModesList: string[];\n  aliasesList: string[];\n  aggregateTime: string;\n  where: MyQueryWhere;\n  variablesNamesListOptions: Array<SelectableValue<string>>;\n}\n\nexport const DEFAULT_QUERY_VARIABLE: Partial<MyVariableQuery> = {\n  from: '${__from:date}',\n  to: '${__to:date}',\n  order: 'Ascending',\n  variablesNamesList: [''],\n  variablesOptions: [],\n  aggregateModesList: ['None'],\n  aliasesList: [''],\n  aggregateTime: 'None',\n  where: { items: [], operators: [] },\n  variablesNamesListOptions: []\n};\n\n// query editor select where comparator options\nexport const whereComparatorOptions: Array<SelectableValue<whereComparatorType>> = [\n  { label: '=', value: '=' },\n  { label: '!=', value: '!=' },\n  { label: '<', value: '<' },\n  { label: '>', value: '>' },\n  { label: '<=', value: '<=' },\n  { label: '>=', value: '>=' },\n  { label: 'includes', value: 'includes' },\n  { label: 'not includes', value: 'not includes' },\n  { label: 'starts with', value: 'starts with' },\n  { label: 'ends with', value: 'ends with' }\n];\n\n// query editor select where comparator options\nexport const whereOperatorOptions: Array<SelectableValue<whereOperatorType>> = [\n  { label: 'and', value: 'and' },\n  { label: 'or', value: 'or' }\n];\n\nexport type whereComparatorType = '=' | '!=' | '<' | '>' | '<=' | '>='\n  | \"includes\" | \"not includes\" | \"starts with\" | \"ends with\";\n\nexport type whereOperatorType = 'and' | 'or' | '';\n\n// query editor select order options\nexport const orderOptions: Array<SelectableValue<string>> = [\n  { label: 'Ascending', value: 'Ascending' },\n  { label: 'Descending', value: 'Descending' },\n];\n\n// query editor select aggregate mode options\nexport const aggregateModeOptions: Array<SelectableValue<string>> = [\n  { label: 'None', value: 'None' },\n  { label: 'First', value: 'First' },\n  { label: 'Last', value: 'Last' },\n  { label: 'Max', value: 'Max' },\n  { label: 'Min', value: 'Min' },\n  { label: 'Average', value: 'Average' },\n  { label: 'Sum', value: 'Sum' },\n  { label: 'Counter', value: 'Counter' },\n  { label: 'Count', value: 'Count' },\n  { label: 'StandardDeviation', value: 'StandardDeviation' },\n  { label: 'Variance', value: 'Variance' },\n  { label: 'TimeWeightedAverage', value: 'TimeWeightedAverage' },\n  { label: 'Timer', value: 'Timer' },\n  { label: 'Duration', value: 'Duration' },\n  { label: 'Occurrence', value: 'Occurrence' },\n  { label: 'MinWithTimestamp', value: 'MinWithTimestamp' },\n  { label: 'MaxWithTimestamp', value: 'MaxWithTimestamp' },\n  { label: 'FirstWithTimestamp', value: 'FirstWithTimestamp' },\n  { label: 'LastWithTimestamp', value: 'LastWithTimestamp' },\n  { label: 'PowerToEnergy', value: 'PowerToEnergy' },\n  { label: 'EnergyToPower', value: 'EnergyToPower' },\n  { label: 'FlowToAmount', value: 'FlowToAmount' },\n  { label: 'AmountToFlow', value: 'AmountToFlow' },\n  { label: 'ValueChanges', value: 'ValueChanges' },\n  { label: 'StepDuration', value: 'StepDuration' },\n  { label: 'MinMaxTrend', value: 'MinMaxTrend' },\n  { label: 'Gantt', value: 'Gantt' },\n  { label: 'GanttView', value: 'GanttView' }\n];\n\n// query editor select aggregate mode options for Calculate Mode\nexport const aggregateModeOptionsCalculate: Array<SelectableValue<string>> = [\n  { label: 'None', value: 'None' },\n  { label: 'First', value: 'First' },\n  { label: 'Last', value: 'Last' },\n  { label: 'Max', value: 'Max' },\n  { label: 'Min', value: 'Min' },\n  { label: 'Average', value: 'Average' },\n  { label: 'Sum', value: 'Sum' },\n  { label: 'Counter', value: 'Counter' },\n  { label: 'Count', value: 'Count' },\n  { label: 'StandardDeviation', value: 'StandardDeviation' },\n  { label: 'Variance', value: 'Variance' },\n  { label: 'TimeWeightedAverage', value: 'TimeWeightedAverage' },\n  { label: 'Timer', value: 'Timer' },\n  { label: 'Duration', value: 'Duration' },\n  { label: 'Occurrence', value: 'Occurrence' },\n  { label: 'MinWithTimestamp', value: 'MinWithTimestamp' },\n  { label: 'MaxWithTimestamp', value: 'MaxWithTimestamp' },\n  { label: 'FirstWithTimestamp', value: 'FirstWithTimestamp' },\n  { label: 'LastWithTimestamp', value: 'LastWithTimestamp' },\n  { label: 'PowerToEnergy', value: 'PowerToEnergy' },\n  { label: 'EnergyToPower', value: 'EnergyToPower' },\n  { label: 'FlowToAmount', value: 'FlowToAmount' },\n  { label: 'AmountToFlow', value: 'AmountToFlow' }\n];\n\n// query editor select aggregate time options\nexport const aggregateTimeOptions: Array<SelectableValue<string>> = [\n  { label: 'None', value: 'None' },\n  { label: '1s', value: '1s' },\n  { label: '2s', value: '2s' },\n  { label: '3s', value: '3s' },\n  { label: '4s', value: '4s' },\n  { label: '5s', value: '5s' },\n  { label: '10s', value: '10s' },\n  { label: '15s', value: '15s' },\n  { label: '20s', value: '20s' },\n  { label: '25s', value: '25s' },\n  { label: '30s', value: '30s' },\n  { label: '45s', value: '45s' },\n  { label: '1m', value: '1m' },\n  { label: '2m', value: '2m' },\n  { label: '3m', value: '3m' },\n  { label: '4m', value: '4m' },\n  { label: '5m', value: '5m' },\n  { label: '10m', value: '10m' },\n  { label: '15m', value: '15m' },\n  { label: '20m', value: '20m' },\n  { label: '30m', value: '30m' },\n  { label: '1h', value: '1h' },\n  { label: '2h', value: '2h' },\n  { label: '6h', value: '6h' },\n  { label: '8h', value: '8h' },\n  { label: '12h', value: '12h' },\n  { label: '1d', value: '1d' },\n  { label: '10d', value: '10d' },\n  { label: '30d', value: '30d' },\n];\n\nexport const aggregateTimeMap: any = {\n  \"None\": 0,\n  \"1s\": 1000,\n  \"2s\": 2000,\n  \"3s\": 3000,\n  \"4s\": 4000,\n  \"5s\": 5000,\n  \"10s\": 10000,\n  \"15s\": 15000,\n  \"20s\": 20000,\n  \"25s\": 25000,\n  \"30s\": 30000,\n  \"45s\": 45000,\n  \"1m\": 60000,\n  \"2m\": 120000,\n  \"3m\": 180000,\n  \"4m\": 240000,\n  \"5m\": 300000,\n  \"10m\": 600000,\n  \"15m\": 900000,\n  \"20m\": 1200000,\n  \"30m\": 1800000,\n  \"1h\": 3600000,\n  \"2h\": 7200000,\n  \"6h\": 21600000,\n  \"8h\": 28800000,\n  \"12h\": 43200000,\n  \"1d\": 86400000,\n  \"10d\": 864000000,\n  \"30d\": 2592000000\n};\n\nexport type QueryGroupObject = {\n  Data: {\n    variablesIdsList: string[],\n  },\n  Aggregate: {\n    variablesIdsList: string[],\n    aggregateModesList: string[]\n  },\n  AggregateTrend: {\n    variablesIdsList: string[],\n    aggregateModesList: string[]\n  }\n};\n\nexport type AllowedRequestType = \"json\" | \"text\" | \"arraybuffer\" | \"blob\" | undefined;\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n  isRemote?: boolean;\n  remoteUrl?: string;\n  remoteUser?: string;\n  remotePassword?: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MySecureJsonData {\n  apiKey?: string;\n}\n","import {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MutableDataFrame,\n  FieldType,\n  SelectableValue\n} from '@grafana/data';\nimport { CascaderOption } from '@grafana/ui';\nimport { getBackendSrv, getTemplateSrv } from \"@grafana/runtime\";\n\nimport _ from \"lodash\";\nimport defaults from \"lodash/defaults\";\nimport { lastValueFrom } from \"rxjs\";\n\nimport {\n  MyQuery, MyDataSourceOptions, AllowedRequestType,\n  QueryGroupObject, aggregateTimeMap, MyQueryWhere,\n  MyVariableQuery, DEFAULT_QUERY\n} from './types';\n\n\nexport class DataSource extends DataSourceApi<MyQuery, MyDataSourceOptions> {\n  baseUrl: string;\n  isRemote?: boolean;\n  remoteConfigUrl: string;\n  remoteUser?: string;\n  remotePassword?: string;\n  remoteRoute: string;\n  localRoute: string;\n  apiUrl: string;\n  remoteToken?: string;\n  remoteTokenExpire: number;\n  getRemoteTokenBody: any;\n  headers: object;\n  nameIdMaps: any;\n  idNameMaps: any;\n  nameTypeMaps: any;\n  idAssetMaps: any;\n  variablesOptions: Array<SelectableValue<string>>;\n  variablesOptionsCascader: CascaderOption[];\n  aggregateBaseBody: any;\n  aggregateTimeMap: any;\n  start: number;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n\n    // console.log(\"start\", instanceSettings);\n\n    // get url of grafana proxy, all requests will be lanuched from server and not from browser\n    this.baseUrl = instanceSettings.url!;\n\n    // get url of dataservice app from the config editor\n    this.remoteConfigUrl = instanceSettings.jsonData.remoteUrl!;\n    this.isRemote = instanceSettings.jsonData.isRemote;\n    this.remoteUser = instanceSettings.jsonData.remoteUser;\n    this.remotePassword = instanceSettings.jsonData.remotePassword;\n\n    // init local Route for external iih essentials\n    this.localRoute = \"/edgeappdataservice\";\n\n    // init remote Route for local iih essentials\n    this.remoteRoute = \"/iihadapter\";\n\n    // init api url\n    this.apiUrl = \"\";\n\n    // init base headers\n    this.headers = {\n      \"Content-Type\": \"application/json\",\n      \"accept\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    };\n\n    // init token for remote IED access\n    this.remoteToken = \"\";\n    this.remoteTokenExpire = 0;\n    this.getRemoteTokenBody = {\n      userName: this.remoteUser,\n      passWord: this.remotePassword,\n    };\n\n    // init base body message for aggregates requests to dataservice\n    this.aggregateBaseBody = {\n      \"from\": \"\",\n      \"to\": \"\",\n      \"dataSources\": []\n    }\n\n    // init map for aggregate time range mapping in milliseconds\n    this.aggregateTimeMap = aggregateTimeMap;\n    // init maps for variables id to name and name to id\n    this.nameIdMaps = {};\n    this.idNameMaps = {};\n    this.nameTypeMaps = {};\n    // init map for assets id to name\n    this.idAssetMaps = {};\n    // init variables options for query editor select\n    this.variablesOptions = [];\n    this.variablesOptionsCascader = [];\n\n    // init start time for query performance calculation\n    this.start = 0;\n\n    // call function to init token, assets, variables\n    this.initPlugin();\n  }\n\n\n  async initPlugin() {\n    try {\n\n      // check if remote or local\n      if (this.isRemote) {\n        // set base url to remote IED if configured\n        this.apiUrl = this.baseUrl + this.remoteRoute;\n        // get the remote IED token\n        await this.getRemoteToken();\n      }\n      else {\n        // set local url iih\n        this.apiUrl = this.baseUrl + this.localRoute;\n      }\n\n      // get assets and create id name map\n      await this.createAssetMap();\n      // get variables and create id name maps\n      await this.createVariablesMap();\n      // get variables and create options for select\n      await this.createVariablesOptions();\n      // get variables and create options for cascader\n      // await this.createVariablesOptionsCascader();\n\n    } catch (error: any) {\n      console.log(\"initPlugin error: \", error);\n    }\n  }\n\n\n  getRemoteToken() {\n    // call remote IED token API\n\n    // copy main class for nested functions \n    let self = this;\n\n    return new Promise<boolean>((resolve, error) => {\n\n      let url = this.apiUrl + \"/device/edge/api/v1/login/direct\";\n\n      // if remote set remote ied token\n      let headers = { \"x-grafana-remotedevice\": this.remoteConfigUrl };\n\n      // get remote IED token\n      self.customRequest(url, headers, \"post\", self.getRemoteTokenBody).then(\n        (res) => {\n          // console.log(res);\n          // save access token\n          self.remoteToken = res.data.access_token;\n          // save next expire timestamp subtracting 1h in ms\n          self.remoteTokenExpire = res.data.expires_in - (60 * 60 * 1000);\n\n          resolve(true);\n        },\n        (err: any) => {\n          console.log(\"getremotetoken error:\", err);\n          error(err);\n        }\n      );\n\n    });\n  }\n\n\n  createAssetMap() {\n    // call get assets API and create id name map\n\n    // init headers and url for API call\n    let headers = {};\n    let url = \"/AssetService/Assets\";\n\n    // check if remote\n    if (this.isRemote) {\n      // if remote set remote ied token\n      //headers = { Cookie: \"authToken=\" + this.remoteToken };\n      headers = {\n        \"x-grafana-remotedevice\": this.remoteConfigUrl,\n        \"x-grafana-remotetoken\": this.remoteToken\n      };\n      // and add iih-essentials route to url\n      url = this.apiUrl + \"/iih-essentials\" + url;\n    }\n    else {\n      url = this.apiUrl + url;\n    }\n\n    // copy main class for nested functions\n    let self = this;\n\n    // console.log(this);\n\n    return new Promise<boolean>((resolve, error) => {\n      // make request for variables list\n      self.customGetRequest(url, headers).then(\n        (res: any) => {\n          // console.log(res);\n          // check if assets are available\n          if (res.data.hasOwnProperty(\"assets\")) {\n\n            // init asset map\n            let idAssetsMap: { [index: string]: any } = {}\n            // init list of assets\n            let idAssetsList = [];\n\n            // first loop for creating each asset in the asset map\n            for (let i = 0; i < res.data.assets.length; i++) {\n              // get the current asset\n              let asset = res.data.assets[i];\n              // init the asset properties\n              idAssetsMap[asset.assetId.toString()] = {\n                hasParent: false,\n                parents: [],\n                parentsNames: [],\n                name: asset.name,\n                id: asset.assetId.toString(),\n              };\n              // if the asset has a parent\n              if (asset.parentId !== \"\") {\n                // get first parent asset of the actual asset\n                let parentId = asset.parentId.toString();\n                // assign the parent asset properties\n                idAssetsMap[asset.assetId].hasParent = true;\n                idAssetsMap[asset.assetId].parents.push(parentId);\n              }\n\n              // push asset to list\n              idAssetsList.push(asset.assetId.toString());\n            }\n\n            // second loop for assigning tree parent structure to each asset element\n            for (let i = 0; i < res.data.assets.length; i++) {\n              // get the current asset\n              let asset = res.data.assets[i];\n              // if the asset has a parent\n              if (asset.parentId !== \"\") {\n                // get first parent asset of the actual asset\n                let parentId = asset.parentId.toString();\n                // loop on the tree of the parents inserting the parents assets in the parent list\n                while (idAssetsMap[parentId].hasParent) {\n                  parentId =\n                    idAssetsMap[parentId].parents[idAssetsMap[parentId].parents.length - 1];\n                  idAssetsMap[asset.assetId].parents.unshift(parentId);\n                }\n              }\n            }\n\n            // third loop to create a parents names list based on parents id list\n            for (let i = 0; i < idAssetsList.length; i++) {\n              // get the asset element in assets map\n              let asset = idAssetsMap[idAssetsList[i]];\n              if (asset.hasParent) {\n                // for each parent find the corresponding name\n                for (let j = 0; j < asset.parents.length; j++) {\n                  asset.parentsNames.push(idAssetsMap[asset.parents[j]].name);\n                }\n              }\n            }\n\n            // save created asset map to global\n            self.idAssetMaps = idAssetsMap;\n\n            resolve(true);\n          } else {\n            console.log(\"No assets found.\");\n            resolve(false);\n          }\n        },\n        (err: any) => {\n          console.log(\"createassetsmap error:\", err);\n          error(false);\n        }\n      );\n    });\n  }\n\n\n  createVariablesMap() {\n    // call get variables API and create id name and name id maps\n\n    // init headers and url for API call\n    let headers = {};\n    let url = \"/DataService/Variables\";\n\n    // check if remote\n    if (this.isRemote) {\n      // if remote set remote ied token\n      //headers = { Cookie: \"authToken=\" + this.remoteToken };\n      headers = {\n        \"x-grafana-remotedevice\": this.remoteConfigUrl,\n        \"x-grafana-remotetoken\": this.remoteToken\n      };\n      // and add iih-essentials route to url\n      url = this.apiUrl + \"/iih-essentials\" + url;\n    }\n    else {\n      url = this.apiUrl + url;\n    }\n\n\n    // copy main class for nested functions\n    let self = this;\n\n    return new Promise<boolean>((resolve, error) => {\n      // make request for variables list\n      self.customGetRequest(url, headers).then(\n        (res: any) => {\n          // check if variables are available\n          if (res.data.hasOwnProperty(\"variables\")) {\n            // loop over variables array\n            for (let i = 0; i < res.data.variables.length; i++) {\n\n              // get asset belonging to the variable\n              // 1. { hasParent: false, parentsNames: [], name: edge }\n              // 2. { hasParent: true, parentsNames: [edge], name: asset }\n              // 3. { hasParent: true, parentsNames: [edge, asset], name: subasset }\n              let asset = this.idAssetMaps[res.data.variables[i].assetId];\n\n              // init asset tree name\n              let assetTreeName = \"\";\n              // check if asset has parents and create base name with asset tree\n              if (asset.hasParent) {\n                // add to the asset tree name each level of assets names\n                // 2. edge.\n                // 3. edge.asset.\n                assetTreeName = asset.parentsNames.join(\".\") + \".\";\n              }\n              // add name of the asset containing the variable to the asset tree name\n              // 1. edge\n              // 2. edge.asset\n              // 3. edge.asset.subasset\n              assetTreeName += asset.name;\n\n              // create the complete asset+variable tree name\n              // 1. edge.variable\n              // 2. edge.asset.variable\n              // 3. edge.asset.subasset.variable\n              let varName = assetTreeName + \".\" + res.data.variables[i].variableName;\n\n              //create map properties as \"varName\": varId\n              self.nameIdMaps[varName] = res.data.variables[i].variableId;\n              self.idNameMaps[res.data.variables[i].variableId] = varName;\n              self.nameTypeMaps[varName] = res.data.variables[i].dataType;\n            }\n\n            resolve(true);\n          } else {\n            console.log(\"No variables.\");\n            resolve(false);\n          }\n        },\n        (err: any) => {\n          console.log(\"createvariablesmap error:\", err);\n          error(false);\n        }\n      );\n    });\n  }\n\n\n  createVariablesOptions() {\n    // call get variables API and create options list for select variable options in the UI\n\n    // init headers and url for API call\n    let headers = {};\n    let url = \"/DataService/Variables\";\n\n    // check if remote\n    if (this.isRemote) {\n      // if remote set remote ied token\n      //headers = { Cookie: \"authToken=\" + this.remoteToken };\n      headers = {\n        \"x-grafana-remotedevice\": this.remoteConfigUrl,\n        \"x-grafana-remotetoken\": this.remoteToken\n      };\n      // and add iih-essentials route to url\n      url = this.apiUrl + \"/iih-essentials\" + url;\n    }\n    else {\n      url = this.apiUrl + url;\n    }\n\n\n    // copy main class for nested functions\n    let self = this;\n\n    // reset options\n    self.variablesOptions = [];\n\n    return new Promise<Array<SelectableValue<string>>>((resolve, error) => {\n\n      // get grafana variables as options for select\n      let grafanaVariables = getTemplateSrv().getVariables() as any;\n      // console.log(grafanaVariables);\n\n      if (grafanaVariables.length > 0) {\n        self.variablesOptions.push({ label: \"Grafana Variables\", value: \"Grafana Variables\", options: [] })\n      }\n\n      // loop over grafana variables\n      for (let i = 0; i < grafanaVariables.length; i++) {\n        // check variable type\n        if (grafanaVariables[i].type === \"custom\" || grafanaVariables[i].type === \"query\") {\n          // custom and query variables can have multiple options\n          let numOptions = grafanaVariables[i].options.length;\n          // remove the All option if present\n          if (grafanaVariables[i].includeAll) {\n            numOptions = numOptions - 1;\n          }\n          // loop over options\n          for (let j = 0; j < numOptions; j++) {\n            // create option as grafana variable name + _ + option index\n            self.variablesOptions[0].options.push({\n              label: \"${\" + grafanaVariables[i].name + \"_\" + j + \"}\",\n              value: \"${\" + grafanaVariables[i].name + \"_\" + j + \"}\",\n            });\n          }\n        }\n        else if (grafanaVariables[i].type === \"constant\" || grafanaVariables[i].type === \"textbox\") {\n          // constant and textbox variables have only one option\n          // create option as grafana variable name\n          self.variablesOptions[0].options.push({\n            label: \"${\" + grafanaVariables[i].name + \"}\",\n            value: \"${\" + grafanaVariables[i].name + \"}\",\n          });\n        }\n      }\n\n      // request var list\n      self.customGetRequest(url, headers).then(\n        (res: any) => {\n          // console.log(res);\n          // check if variables are available\n          if (res.data.hasOwnProperty(\"variables\")) {\n\n            // init variables options list\n            let tmpVarOptions: Array<SelectableValue<string>> = [];\n\n            // loop over variables array\n            for (let i = 0; i < res.data.variables.length; i++) {\n\n              // get asset belonging to the variable\n              // 1. { hasParent: false, parentsNames: [], name: edge }\n              // 2. { hasParent: true, parentsNames: [edge], name: asset }\n              // 3. { hasParent: true, parentsNames: [edge, asset], name: subasset }\n              let asset = this.idAssetMaps[res.data.variables[i].assetId];\n\n              // init asset tree name\n              let assetTreeName = \"\";\n              // check if asset has parents and create base name with asset tree\n              if (asset.hasParent) {\n                // add to the asset tree name each level of assets names\n                // 2. edge.\n                // 3. edge.asset.\n                assetTreeName = asset.parentsNames.join(\".\") + \".\";\n              }\n              // add name of the asset containing the variable to the asset tree name\n              // 1. edge\n              // 2. edge.asset\n              // 3. edge.asset.subasset\n              assetTreeName += asset.name;\n\n              // create the complete asset+variable tree name\n              // 1. edge.variable\n              // 2. edge.asset.variable\n              // 3. edge.asset.subasset.variable\n              let varName = assetTreeName + \".\" + res.data.variables[i].variableName;\n\n              // create option\n              tmpVarOptions.push({\n                label: varName,\n                value: varName,\n              });\n            }\n\n            // order ascending options list\n            tmpVarOptions.sort((a, b) =>\n              typeof a.value === \"string\" && typeof b.value === \"string\" ? a.value.localeCompare(b.value) : 0\n            );\n\n            // concat the grafana variables options with the variables options\n            self.variablesOptions = self.variablesOptions.concat(tmpVarOptions);\n\n            // console.log(self.variablesOptions);\n            resolve(self.variablesOptions);\n          } else {\n            console.log(\"No variables found.\");\n            resolve(self.variablesOptions);\n          }\n        },\n        (err: any) => {\n          console.log(\"createvariablesoptions error:\", err);\n          error(false);\n        }\n      );\n    });\n  }\n\n\n  // variablesToCascaderOptions(variables: any[]) {\n  //   // create options for cascader based on variables list\n\n  //   try {\n  //     // copy main class for nested functions\n  //     let self = this;\n\n  //     // Array to store the cascader options\n  //     let cascaderOptions: CascaderOption[] = [];\n  //     // console.log(self.idAssetMaps);\n\n  //     // Iterate through the assetObject keys to initiate the transformation\n  //     for (const assetId in self.idAssetMaps) {\n  //       // Retrieve the current asset from the assetObject\n  //       const asset = self.idAssetMaps[assetId.toString()];\n  //       if (asset) {\n  //         let currentLevelIndex = 0;\n  //         if (asset.hasParent) {\n  //           // Copy parents to avoid modifying the original array\n  //           const parentNamesCopy = asset.parentsNames.slice();\n  //           // Init the current level as root cascade level\n  //           let currentLevel: CascaderOption[] = cascaderOptions;\n  //           // Iterate through parent names to build the hierarchy\n  //           while (parentNamesCopy.length > 0) {\n  //             // get the first parent name in the array and shift it from array\n  //             const parentName = parentNamesCopy.shift();\n  //             // Find the parent item in the current level\n  //             let parentItem = currentLevel.find((item) => item.label === parentName);\n  //             // If the parent item doesn't exist, create it\n  //             if (!parentItem) {\n  //               // create the parent item with the parent name and id\n  //               parentItem = {\n  //                 label: parentName,\n  //                 value: \"£$%&\" + \"A\" + \"£$%&\" + currentLevelIndex + \"£$%&\" + parentName,\n  //                 items: [],\n  //               };\n  //               currentLevel.push(parentItem);\n  //             }\n  //             // Move to the next level in the hierarchy\n  //             currentLevel = parentItem.items as CascaderOption[];\n  //             currentLevelIndex++;\n  //           }\n  //           if (currentLevel.find((item) => item.label === asset.name) === undefined) {\n  //             // Add the new item to the appropriate level in the hierarchy\n  //             currentLevel.push({\n  //               label: asset.name,\n  //               value: \"£$%&\" + \"A\" + \"£$%&\" + currentLevelIndex + \"£$%&\" + asset.name,\n  //               items: [],\n  //             });\n  //           }\n  //         } else {\n  //           // If the asset has no parent, add the new item directly to the top level\n  //           cascaderOptions.push({\n  //             label: asset.name,\n  //             value: \"£$%&\" + \"A\" + \"£$%&\" + currentLevelIndex + \"£$%&\" + asset.name,\n  //             items: [],\n  //           });\n  //         }\n  //       }\n  //     }\n  //     // console.log(cascaderOptions);\n\n  //     // order by names ascending variables list\n  //     variables.sort((a, b) =>\n  //       typeof a.variableName === \"string\" && typeof b.variableName === \"string\" ? a.variableName.localeCompare(b.variableName) : 0\n  //     );\n\n  //     // Loop over variables to add them to the previous created cascader options\n  //     for (let i = 0; i < variables.length; i++) {\n  //       const variable = variables[i];\n  //       // get the asset where variable belong\n  //       const asset = self.idAssetMaps[variable.assetId];\n  //       if (asset) {\n  //         // get the asset tree of the parent asset and push the asset itself\n  //         let parentsNamesCopy = asset.parentsNames.slice();\n  //         parentsNamesCopy.push(asset.name);\n  //         // Init the current level as root cascade level\n  //         let currentLevel: CascaderOption[] = cascaderOptions;\n  //         let currentLevelIndex = 0;\n  //         // Iterate through parent names to find the right asset option\n  //         while (parentsNamesCopy.length > 0) {\n  //           // get the first parent name in the array and shift it from array\n  //           let parentName = parentsNamesCopy.shift();\n  //           // Find the parent item in the current level\n  //           let parentItem = currentLevel.find((item) => item.label === parentName);\n  //           if (parentItem) {\n  //             // if the parent item is the item itself push the new option to the item\n  //             if (asset.name === parentName) {\n  //               parentItem.items?.push({\n  //                 label: variable.variableName,\n  //                 value: \"£$%&\" + \"V\" + \"£$%&\" + (currentLevelIndex + 1) + \"£$%&\" + variable.variableName,\n  //               });\n  //               break;\n  //             }\n  //             // Move to the next level in the hierarchy\n  //             currentLevel = parentItem.items as CascaderOption[];\n  //           }\n  //           currentLevelIndex++;\n  //         }\n  //       }\n  //     }\n  //     // console.log(cascaderOptions);\n\n  //     return cascaderOptions;\n  //   }\n  //   catch (error: any) {\n  //     console.log(\"variablestocascaderoptions error: \", error);\n  //     return [];\n  //   }\n  // }\n\n\n  // grafanaVariablesToCascaderOptions(grafanaVariables: any[]) {\n  //   // create options for cascader based on grafana variables list\n\n  //   // init cascader options\n  //   let cascaderOptions: CascaderOption[] = [];\n\n  //   // if some grafana variables are present create root cascader option for them\n  //   if (grafanaVariables.length > 0) {\n  //     cascaderOptions.push({ label: \"Dashboard Variables\", value: \"Dashboard Variables\", items: [] })\n  //   }\n\n  //   // loop over grafana variables\n  //   for (let i = 0; i < grafanaVariables.length; i++) {\n  //     let variable = grafanaVariables[i];\n  //     if (cascaderOptions[0]?.items) {\n  //       // check variable type\n  //       if (variable.type === \"custom\" || variable.type === \"query\") {\n  //         // custom and query variables can have multiple options\n  //         // a intermediate level is created for each variable\n  //         // inside items are the options of each variable\n\n  //         // push variable as option and init its items array\n  //         let actOptionIndex = (cascaderOptions[0].items.push({\n  //           label: \"${\" + variable.name + \"}\",\n  //           value: \"${\" + variable.name + \"}\", items: []\n  //         })) - 1;\n  //         // find the number of options for the variable\n  //         let numOptions = variable.options.length;\n  //         // remove the \"All\" option if present\n  //         if (variable.includeAll) {\n  //           numOptions = numOptions - 1;\n  //         }\n  //         // loop over options\n  //         for (let j = 0; j < numOptions; j++) {\n  //           if (cascaderOptions[0]?.items[actOptionIndex]?.items ?? false) {\n  //             // create option item inside the variable item\n  //             cascaderOptions[0].items[actOptionIndex]?.items?.push({\n  //               label: \"Option \" + (j + 1),\n  //               value: (j + 1).toString(),\n  //             });\n  //           }\n  //         }\n  //       }\n  //       else if (variable.type === \"constant\" || variable.type === \"textbox\") {\n  //         // constant and textbox variables have only one option\n  //         // create option as grafana variable name\n  //         cascaderOptions[0].items.push({\n  //           label: \"${\" + variable.name + \"}\",\n  //           value: \"${\" + variable.name + \"}\",\n  //         });\n  //       }\n  //     }\n  //   }\n\n  //   return cascaderOptions;\n  // }\n\n\n  // createVariablesOptionsCascader() {\n  //   // call get variables API and create options list for select variable options in the UI\n\n  //   // init headers and url for API call\n  //   let headers = {};\n  //   let url = \"/DataService/Variables\";\n\n  //   // check if remote\n  //   if (this.isRemote) {\n  //     // if remote set remote ied token\n  //     //headers = { Cookie: \"authToken=\" + this.remoteToken };\n  //     headers = {\n  //       \"x-grafana-remotedevice\": this.remoteConfigUrl,\n  //       \"x-grafana-remotetoken\": this.remoteToken\n  //     };\n  //     // and add iih-essentials route to url\n  //     url = this.apiUrl + \"/iih-essentials\" + url;\n  //   }\n  //   else {\n  //     url = this.apiUrl + url;\n  //   }\n\n\n  //   // copy main class for nested functions\n  //   let self = this;\n\n\n  //   return new Promise<CascaderOption[]>((resolve, error) => {\n\n  //     // reset options\n  //     self.variablesOptionsCascader = [];\n\n  //     // get grafana variables as options for select\n  //     let grafanaVariables = getTemplateSrv().getVariables() as any;\n  //     // console.log(grafanaVariables);\n  //     // if some grafana variables are present create root cascader option for them\n  //     self.variablesOptionsCascader = self.grafanaVariablesToCascaderOptions(grafanaVariables);\n  //     // console.log(self.variablesOptionsCascader);\n\n  //     // request var list\n  //     self.customGetRequest(url, headers).then(\n  //       (res: any) => {\n  //         // console.log(res);\n  //         // check if variables are available\n  //         if (res.data.hasOwnProperty(\"variables\")) {\n  //           // create options for cascader based on received variables list\n  //           let tmpVarOptions = self.variablesToCascaderOptions(res.data.variables);\n  //           // concat the grafana variables options with the variables options\n  //           self.variablesOptionsCascader = self.variablesOptionsCascader.concat(tmpVarOptions);\n  //           // resolve the options list\n  //           resolve(self.variablesOptionsCascader);\n  //         } else {\n  //           console.log(\"No variables found.\");\n  //           resolve(self.variablesOptionsCascader);\n  //         }\n  //       },\n  //       (err: any) => {\n  //         console.log(\"createvariablesoptions error:\", err);\n  //         error(false);\n  //       }\n  //     );\n  //   });\n  // }\n\n\n  applyWhereClause(value: any, comparator: string, element2: string) {\n\n    // possible comparators: =, !=, <, >, <=, >=, includes, not includes, starts with, ends with\n    // apply comparator to value and element2 and return the result\n    try {\n\n      if (comparator === \"=\") {\n        value = value === undefined ? \"undefined\" : value;\n        return value.toString() === element2.toString();\n      }\n      else if (comparator === \"!=\") {\n        value = value === undefined ? \"undefined\" : value;\n        return value.toString() !== element2.toString();\n      }\n      else if (comparator === \"<\" && value !== undefined) {\n        return Number(value) < Number(element2);\n      }\n      else if (comparator === \">\" && value !== undefined) {\n        return Number(value) > Number(element2);\n      }\n      else if (comparator === \"<=\" && value !== undefined) {\n        return Number(value) > Number(element2);\n      }\n      else if (comparator === \">=\" && value !== undefined) {\n        return Number(value) > Number(element2);\n      }\n      else if (comparator === \"includes\" && value !== undefined) {\n        return value.toString().includes(element2.toString());\n      }\n      else if (comparator === \"not includes\" && value !== undefined) {\n        return !value.toString().includes(element2.toString());\n      }\n      else if (comparator === \"starts with\" && value !== undefined) {\n        return value.toString().startsWith(element2.toString());\n      }\n      else if (comparator === \"ends with\" && value !== undefined) {\n        return value.toString().endsWith(element2.toString());\n      }\n      else {\n        return false;\n      }\n\n    } catch (error: any) {\n      console.log(\"applyWhereClause error: \", error);\n    }\n  }\n\n\n  queryData(timeBuffer: string[], dataBuffer: any,\n    ids: string, from: string, to: string, order: string) {\n    // call get raw data API, extract data to temp fields and update main buffer data\n\n    // init headers and url for API call\n    let headers = {};\n    let url = \"/DataService/Data\";\n\n    // check if remote\n    if (this.isRemote) {\n      // if remote set remote ied token\n      //headers = { Cookie: \"authToken=\" + this.remoteToken };\n      headers = {\n        \"x-grafana-remotedevice\": this.remoteConfigUrl,\n        \"x-grafana-remotetoken\": this.remoteToken\n      };\n      // and add iih-essentials route to url\n      url = this.apiUrl + \"/iih-essentials\" + url;\n    }\n    else {\n      url = this.apiUrl + url;\n    }\n\n\n    // copy main class for nested functions\n    let self = this;\n\n    return new Promise((resolve, error) => {\n\n      // create query string for dataservice\n      const queryParams = `variableIds=${ids}&from=${from}&to=${to}&order=${order}`;\n\n      // start request\n      self.customGetRequest(url, headers, \"json\", queryParams).then(\n        (res: any) => {\n          // get datapoints array from response\n          let datapoints = res.data.data;\n          // init time index used for all buffers arrays\n          let tIndex = -1;\n          // console.log(res.data);\n          // loop over datapoints\n          for (let i = 0; i < datapoints.length; i++) {\n            // create query variable name based on variable id and aggregate mode\n            let queryVarName = datapoints[i].variableId + \"_None\";\n            // loop over values of the current datapoint\n            for (let j = 0; j < datapoints[i].values.length; j++) {\n              // search for the timestamp in the timestamps buffer, if not found add it and save the index\n              tIndex = timeBuffer.indexOf(datapoints[i].values[j].timestamp);\n              if (tIndex === -1) {\n                timeBuffer.push(datapoints[i].values[j].timestamp);\n                tIndex = timeBuffer.length - 1;\n              }\n              // save the value in the data array in the same position of the timestamp\n              dataBuffer[queryVarName][tIndex] = datapoints[i].values[j].value;\n            }\n          }\n          // console.log(dataBuffer);\n\n          if (!res.data.hasOwnProperty(\"hasMoreData\")) {\n            // console.log(\"finish\");\n            resolve({\n              queryFinished: true,\n              queryFrom: \"\",\n              queryTo: \"\",\n              timeBuffer: timeBuffer,\n              dataBuffer: dataBuffer,\n            });\n          } else {\n            // if query has still data update the time range for next loop query\n            resolve({\n              queryFinished: false,\n              queryFrom: res.data.hasMoreData.from,\n              queryTo: res.data.hasMoreData.to,\n              timeBuffer: timeBuffer,\n              dataBuffer: dataBuffer,\n            });\n          }\n        },\n        (err: any) => {\n          console.log(\"querydata error\", err);\n          error(false);\n        }\n      );\n    });\n  }\n\n\n  queryDataAggregateTrend(\n    timeBuffer: string[],\n    dataBuffer: any,\n    ids: string[],\n    from: string,\n    to: string,\n    aggregateModes: string[],\n    aggregateTime: number\n  ) {\n    // call get aggregate trend data API, extract data to temp fields and update main buffer data\n\n    // init headers and url for API call\n    let headers = {};\n    let url = \"/DataService/CalculateTrend\";\n\n    // init base body\n    let baseAggregateBody = this.aggregateBaseBody;\n\n    // check if remote\n    if (this.isRemote) {\n      // if remote set remote ied token\n      //headers = { Cookie: \"authToken=\" + this.remoteToken };\n      headers = {\n        \"x-grafana-remotedevice\": this.remoteConfigUrl,\n        \"x-grafana-remotetoken\": this.remoteToken\n      };\n      // and add iih-essentials route to url\n      url = this.apiUrl + \"/iih-essentials\" + url;\n    }\n    else {\n      url = this.apiUrl + url;\n    }\n\n\n    // copy main class for nested functions\n    let self = this;\n\n    return new Promise((resolve, error) => {\n\n      // create query body based on base body\n      const aggregateBody = {\n        ...baseAggregateBody,\n        from: from,\n        to: to,\n        calculationTimeRange: aggregateTime,\n        dataSources: [],\n      };\n\n      // push variables to query body by using ids string\n      for (let i = 0; i < ids.length; i++) {\n        aggregateBody.dataSources.push({\n          type: \"Variable\",\n          id: ids[i],\n          aggregation: aggregateModes[i],\n        });\n      }\n\n      // start request\n      self\n        .customRequest(url, headers, \"post\", aggregateBody)\n        .then(\n          (res: any) => {\n            // get datapoints array from response\n            let datapoints = res.data;\n\n            // init time index used for all buffers arrays\n            let tIndex = -1;\n            // console.log(res.data);\n            // loop over datapoints\n            for (let i = 0; i < datapoints.length; i++) {\n              // create query variable name based on variable id and aggregate mode\n              let queryVarName = datapoints[i].dataSource.id + \"_\" + datapoints[i].dataSource.aggregation;\n              // loop over values of the current datapoint\n              for (let j = 0; j < datapoints[i].values.length; j++) {\n                // search for the timestamp in the timestamps buffer, if not found add it and save the index\n                tIndex = timeBuffer.indexOf(datapoints[i].values[j].timestamp);\n                if (tIndex === -1) {\n                  timeBuffer.push(datapoints[i].values[j].timestamp);\n                  tIndex = timeBuffer.length - 1;\n                }\n                // save the value in the temporary array in the same position of the timestamp\n                dataBuffer[queryVarName][tIndex] = datapoints[i].values[j].value;\n              }\n            }\n            // console.log(dataBuffer);\n\n            if (!res.data.hasOwnProperty(\"hasMoreData\")) {\n              // console.log(\"finish\");\n              resolve({\n                queryFinished: true,\n                queryFrom: \"\",\n                queryTo: \"\",\n                timeBuffer: timeBuffer,\n                dataBuffer: dataBuffer,\n              });\n            } else {\n              // if query has still data update the time range for next loop query\n              resolve({\n                queryFinished: false,\n                queryFrom: res.data.hasMoreData.from,\n                queryTo: res.data.hasMoreData.to,\n                timeBuffer: timeBuffer,\n                dataBuffer: dataBuffer,\n              });\n            }\n          },\n          (err: any) => {\n            console.log(\"querydataaggregatetrend error:\", err);\n            error(false);\n          }\n        );\n    });\n  }\n\n\n  queryDataAggregate(\n    timeBuffer: string[],\n    dataBuffer: any,\n    ids: string[],\n    from: string,\n    to: string,\n    aggregateModes: string[]\n  ) {\n    // call get aggregate data API, extract data to temp fields and update main buffer data\n    // this API return only 1 value!\n\n    // init headers and url for API call\n    let headers = {};\n    let url = \"/DataService/Calculate\";\n\n\n    // check if remote\n    if (this.isRemote) {\n      // if remote set remote ied token\n      //headers = { Cookie: \"authToken=\" + this.remoteToken };\n      headers = {\n        \"x-grafana-remotedevice\": this.remoteConfigUrl,\n        \"x-grafana-remotetoken\": this.remoteToken\n      };\n      // and add iih-essentials route to url\n      url = this.apiUrl + \"/iih-essentials\" + url;\n    }\n    else {\n      url = this.apiUrl + url;\n    }\n\n    // copy main class for nested functions\n    let self = this;\n\n    return new Promise((resolve, error) => {\n      // create query body\n      const aggregateBody = {\n        ...self.aggregateBaseBody,\n        from: from,\n        to: to,\n        dataSources: [],\n      };\n\n      // push variables to query body by using ids string\n      for (let i = 0; i < ids.length; i++) {\n        aggregateBody.dataSources.push({\n          type: \"Variable\",\n          id: ids[i],\n          aggregation: aggregateModes[i],\n        });\n      }\n\n      // start request\n      self.customRequest(url, headers, \"post\", aggregateBody).then(\n        (res: any) => {\n          // get datapoints array from response\n          let datapoints = res.data;\n          // console.log(res.data);\n\n          // init time index used for all buffers arrays\n          let tIndex = -1;\n          // console.log(res.data);\n          // loop over datapoints\n          for (let i = 0; i < datapoints.length; i++) {\n            // create query variable name based on variable id and aggregate mode\n            let queryVarName = datapoints[i].dataSource.id + \"_\" + datapoints[i].dataSource.aggregation;\n            // search for the timestamp in the timestamps buffer, if not found add it and save the index\n            tIndex = timeBuffer.indexOf(to);\n            if (tIndex === -1) {\n              // if timebuffer is empty push to value, else use the last timestamp already present\n              if (timeBuffer.length === 0) {\n                timeBuffer[0] = to;\n                tIndex = 0;\n              }\n              else {\n                tIndex = timeBuffer.length - 1;\n              }\n            }\n            // save the value in the data array in the same position of the timestamp\n            dataBuffer[queryVarName][tIndex] = datapoints[i].value;\n          }\n\n          // only one value will be returned, so we can finish the query\n          resolve({ queryFinished: true, timeBuffer: timeBuffer, dataBuffer: dataBuffer });\n        },\n        (err: any) => {\n          console.log(\"querydataaggregate error:\", err);\n          error(false);\n        }\n      );\n    });\n  }\n\n\n  async queryLoop(\n    timeBuffer: string[],\n    dataBuffer: any,\n    queryObject: QueryGroupObject,\n    from: string,\n    to: string,\n    order: string,\n    aggregateTime: number\n  ) {\n    // this function handle multiple queries till the results are all available based on dataservice responses\n\n    // initialize loop properties\n    let queryFrom = from;\n    let queryTo = to;\n    let tBuf = timeBuffer;\n    let dBuf = dataBuffer;\n    // define the query groups types\n    let queryGroups: string[] = [\"Data\", \"Aggregate\", \"AggregateTrend\"];\n    // loop over the query groups\n    for (let i = 0; i < queryGroups.length; i++) {\n      let queryGroupName = queryGroups[i];\n      // initialize the query finished flag\n      let queryFinished = false;\n      // check the query type and run the corresponding query function\n      if (queryGroupName === \"Data\") {\n        // create ids string for query\n        let ids = '[\"' + queryObject.Data.variablesIdsList.join('\",\"') + '\"]';\n        // a for loop that handle multiple data requests\n        for (let j = 1; !queryFinished && j < 99999; j++) {\n          // delay needed to avoid too requests overlapping\n          await this.delay(150);\n\n          // run raw data query\n          this.queryData(tBuf,\n            dBuf,\n            ids,\n            queryFrom,\n            queryTo,\n            order)\n            .then((res: any) => {\n              // update buffers\n              tBuf = res.timeBuffer;\n              dBuf = res.dataBuffer;\n\n              if (res.queryFinished) {\n                queryFinished = true;\n              } else {\n                // update time range for next loop\n                queryFrom = res.queryFrom;\n                queryTo = res.queryTo;\n              }\n            })\n            .catch((err: any) => console.log(\"queryloopdata error:\", err));\n        }\n      } else if (queryGroupName === \"AggregateTrend\") {\n        // a for loop that handle multiple data requests\n        for (let j = 1; !queryFinished && j < 99999; j++) {\n          // delay needed to avoid too requests overlapping\n          await this.delay(150);\n\n          // run aggregate trend query\n          this.queryDataAggregateTrend(tBuf,\n            dBuf,\n            queryObject.AggregateTrend.variablesIdsList,\n            queryFrom,\n            queryTo,\n            queryObject.AggregateTrend.aggregateModesList,\n            aggregateTime)\n            .then((res: any) => {\n              // update buffers\n              tBuf = res.timeBuffer;\n              dBuf = res.dataBuffer;\n\n              if (res.queryFinished) {\n                queryFinished = true;\n              } else {\n                // update time range for next loop\n                queryFrom = res.queryFrom;\n                queryTo = res.queryTo;\n              }\n            })\n            .catch((err: any) => console.log(\"queryloopaggregatetrend error:\", err));\n        }\n      } else if (queryGroupName === \"Aggregate\") {\n        await this.delay(150);\n\n        // run single aggregate query\n        this.queryDataAggregate(tBuf,\n          dBuf,\n          queryObject.Aggregate.variablesIdsList,\n          queryFrom,\n          queryTo,\n          queryObject.Aggregate.aggregateModesList)\n          .then((res: any) => {\n            // update buffers\n            tBuf = res.timeBuffer;\n            dBuf = res.dataBuffer;\n\n            if (res.queryFinished) {\n              queryFinished = true;\n            }\n          })\n          .catch((err: any) => console.log(\"queryloopaggregate error:\", err));\n      }\n    }\n\n    return { timeBuffer: tBuf, dataBuffer: dBuf };\n  }\n\n\n  async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n    // the query method for Grafana\n    const promises = options.targets.map(async (target) => {\n\n      // the query object from panel\n      const query: any = defaults(target, DEFAULT_QUERY);\n      // console.log(\"query\", query);\n\n      // init grafana response fields\n      let fields: any[] = [];\n\n      // check token based on version\n      let tokenCheck = false;\n\n      if (this.isRemote) {\n        // if IED token has expired or empty renew it\n        if (new Date().getTime() > this.remoteTokenExpire || this.remoteToken === \"\") {\n          await this.getRemoteToken();\n          await this.createAssetMap();\n          await this.createVariablesMap();\n          await this.createVariablesOptions();\n          // await this.createVariablesOptionsCascader();\n        }\n        // if IED token exist pass check\n        if (this.remoteToken !== \"\") {\n          tokenCheck = true;\n        }\n      }\n      else {\n        // if is local no need for IED token\n        tokenCheck = true;\n      }\n\n      // if previous check of token was successful\n      if (tokenCheck) {\n        //this.start = new Date().getTime();\n\n        // if grafana variables are used in variablesnames field, replace them\n        let varNamesList = query.variablesNamesList;\n        // console.log(\"varNamesList\", varNamesList);\n        // if grafana variables are used in from and to fields, replace them\n        let from = getTemplateSrv().replace(query.from, options.scopedVars);\n        let to = getTemplateSrv().replace(query.to, options.scopedVars);\n        // get the requested order mode\n        let queryOrder = query.order === \"Descending\" ? \"Descending\" : \"Ascending\";\n        // get the list of aliases\n        let aliasesList = query.aliasesList;\n        // get the requested aggregation mode list\n        let queryAggregateModes = query.aggregateModesList;\n        // get the aggregate time in ms\n        let queryAggregateTime = this.aggregateTimeMap[query.aggregateTime];\n        // get the query where clause\n        let queryWhere = query.where || { items: [], operators: [] };\n        // console.log(\"queryWhere\", queryWhere);\n\n        // get the grafana variables\n        let grafanaVariables = getTemplateSrv().getVariables() as any;\n        // console.log(\"grafanaVariables\", grafanaVariables);\n\n        // generate query groups, some lists with variables properties and the field names\n        let fvRes: any = await this.createQueryProperties(\n          varNamesList,\n          grafanaVariables,\n          queryAggregateModes,\n          queryAggregateTime,\n          aliasesList);\n        let queryGroups = fvRes.queryGroups;\n        let queryVarNameList = fvRes.queryVarNameList;\n        let queryVarIdList = fvRes.queryVarIdList;\n        let queryVarTypeList = fvRes.queryVarTypeList;\n        let fieldNames = fvRes.fieldNames;\n        // console.log(queryVarNameList);\n        // console.log(fieldNames);\n        // console.log(queryGroups);\n\n        // based on the query configuration generate the where clause for the query\n        let gwcRes: any = await this.generateWhereClause(queryWhere, queryVarIdList, grafanaVariables);\n        let whereClauseActiveCheck = gwcRes.whereClauseActiveCheck;\n        let whereClauseActive = gwcRes.whereClauseActive;\n        queryWhere = gwcRes.queryWhere;\n        // console.log(\"queryWhere\", queryWhere);\n\n        // check if the from and to are valid and if there is some field to query\n        if (\n          new Date(from).getTime() > 0\n          && new Date(to).getTime() > 0\n          && new Date(from).getTime() < new Date(to).getTime()\n          && fieldNames.length > 0\n        ) {\n          // format dates to ISO string for the query\n          from = new Date(from).toISOString();\n          // if to is greater than now, set it to now\n          to = new Date(to).getTime() > new Date().getTime() ? new Date().toISOString() : new Date(to).toISOString();\n\n          // reset the buffers\n          let dataBuffer: any = {};\n          queryVarNameList.map((name: string) => (dataBuffer[name] = []));\n          let timeBuffer: string[] = [];\n\n          // start the query\n          const queryFinish = await this.queryLoop(\n            timeBuffer,\n            dataBuffer,\n            queryGroups,\n            from,\n            to,\n            queryOrder,\n            queryAggregateTime\n          );\n          // console.log(timeBuffer);\n          // console.log(dataBuffer);\n\n          // based on the data received format them to create the grafana fields to be sent to page\n          let fqRes: any = await this.formatQueryResult(\n            fields,\n            queryFinish,\n            queryVarNameList,\n            queryVarIdList,\n            queryVarTypeList,\n            queryOrder,\n            queryGroups,\n            whereClauseActiveCheck,\n            whereClauseActive,\n            queryWhere,\n            fieldNames\n          );\n          fields = fqRes.fields;\n        }\n      }\n      // console.log(new Date().getTime() - this.start);\n      // console.log(\"fields\", fields);\n\n      // return the grafana fields\n      return new MutableDataFrame({\n        refId: query.refId,\n        fields: fields,\n      });\n    });\n\n    return Promise.all(promises).then((data) => ({ data }));\n  }\n\n\n  createQueryProperties(\n    varNamesList: string[],\n    grafanaVariables: any,\n    queryAggregateModes: string[],\n    queryAggregateTime: number,\n    aliasesList: string[]) {\n\n    return new Promise((resolve, error) => {\n\n      // create the query object containing the variables ids and the aggregate modes for each API type\n      let queryGroups: QueryGroupObject = {\n        Data: {\n          variablesIdsList: []\n        },\n        Aggregate: {\n          variablesIdsList: [],\n          aggregateModesList: []\n        },\n        AggregateTrend: {\n          variablesIdsList: [],\n          aggregateModesList: []\n        }\n      };\n      // create the query variables names (id + agg mode) list and the field names list\n      let queryVarNameList: string[] = [];\n      let queryVarIdList: string[] = [];\n      let queryVarTypeList: string[] = [];\n      let fieldNames: string[] = [];\n\n      // loop over the variables names list\n      for (let i = 0; i < varNamesList.length; i++) {\n        let varName = varNamesList[i];\n\n        // check if the variable name is valid\n        if (varName !== \"\" && varName !== undefined && varName !== \"undefined\" && varName !== null) {\n\n          // if the variable name is a grafana variable\n          if (varName.startsWith(\"${\") && varName.endsWith(\"}\")) {\n            // from ${varname} to varname or ${varname_1} to varname_1\n            let dashboardVar = varName.substring(2, varName.length - 1);\n            // from varname to [varname] or varname_1 to [varname, 1]\n            let splitDashboardVar = dashboardVar.split(\"_\");\n            // index of the option in the grafana variables list or -1 if no _ is present\n            let grafanaOptionIndex = splitDashboardVar.length > 1 ? Number(splitDashboardVar[splitDashboardVar.length - 1]) : 0;\n            // variable name without index\n            let grafanaVarName = splitDashboardVar.length > 1 ? splitDashboardVar.slice(0, -1).join(\"_\") : splitDashboardVar[0];\n            // get the variable object from the grafana variables list filtering by name\n            let grafanaVar = grafanaVariables.filter((v: any) => v.name === grafanaVarName);\n            // if the variable is found\n            if (grafanaVar.length > 0) {\n              // based on the variable type get the value of the option\n              if (grafanaVar[0].type === \"textbox\" || grafanaVar[0].type === \"constant\") {\n                varName = grafanaVar[0].current.value;\n              }\n              else if (grafanaVar[0].type === \"query\" || grafanaVar[0].type === \"custom\") {\n                // get the selected option\n                let option = grafanaVar[0].options[grafanaVar[0].includeAll ? grafanaOptionIndex + 1 : grafanaOptionIndex];\n                if (option.selected) {\n                  varName = option.value;\n                }\n                else {\n                  // if the option is not selected, the variable will be discarded\n                  break;\n                }\n              }\n            }\n            else {\n              // if the option is not found, the variable will be discarded\n              break;\n            }\n          }\n\n          // get the variable id and the aggregate mode\n          let aggregateMode = queryAggregateModes[i];\n          let variableId = this.nameIdMaps[varName];\n          // get the alias name\n          let alias = aliasesList[i];\n\n          // check if the variable id is valid\n          if (variableId !== undefined && variableId !== null && variableId !== \"undefined\" && variableId !== \"\") {\n            // check if the alias name is a grafana variable\n            let aliasIndexStart = alias.indexOf(\"${\");\n            let aliasIndexEnd = alias.indexOf(\"}\");\n            if (aliasIndexStart !== -1 && aliasIndexEnd !== -1) {\n              // from alias_${varname_1}_chart to varname_1\n              let dashboardVar = alias.substring(aliasIndexStart + 2, aliasIndexEnd);\n              // from varname to [varname] or varname_1 to [varname, 1]\n              let splitDashboardVar = dashboardVar.split(\"_\");\n              // index of the option in the grafana variables list or -1 if no _ is present\n              let grafanaOptionIndex = splitDashboardVar.length > 1 ? Number(splitDashboardVar[splitDashboardVar.length - 1]) : -1;\n              // variable name without index\n              let grafanaVarName = splitDashboardVar.length > 1 ? splitDashboardVar.slice(0, -1).join(\"_\") : splitDashboardVar[0];\n              // get the variable object from the grafana variables list filtering by name\n              let grafanaVar = grafanaVariables.filter((v: any) => v.name === grafanaVarName);\n              // if the variable is found\n              if (grafanaVar.length > 0) {\n                // based on the variable type get the value of the option\n                if (grafanaVar[0].type === \"textbox\" || grafanaVar[0].type === \"constant\") {\n                  alias = alias.replace(\"${\" + grafanaVarName + \"}\", grafanaVar[0].current.value);\n                }\n                else if (grafanaVar[0].type === \"query\" || grafanaVar[0].type === \"custom\") {\n                  // get the selected option\n                  let option = grafanaVar[0].options[grafanaVar[0].includeAll ? grafanaOptionIndex + 1 : grafanaOptionIndex];\n                  // console.log(option);\n                  if (option.selected) {\n                    alias = alias.replace(\"${\" + grafanaVarName + \"_\" + grafanaOptionIndex + \"}\", option.value);\n                  }\n                }\n              }\n              // else {\n              //   // if the option is not selected, the variable will be discarded\n              //   break;\n              // }\n            }\n          }\n          else {\n            // if the variable id is not found, the variable will be discarded\n            break;\n          }\n\n          // create the query variable name based on the variable id and the aggregate mode\n          queryVarNameList.push(variableId + \"_\" + aggregateMode);\n          // create the field name based on the variable name and the aggregate mode or on the alias\n          let fieldName = alias !== \"\"\n            ? alias\n            : aggregateMode !== \"None\"\n              ? varName + \"_\" + aggregateMode\n              : varName;\n          queryVarIdList.push(variableId);\n          queryVarTypeList.push(this.nameTypeMaps[varName]);\n          fieldNames.push(fieldName);\n\n          // check the query type (raw, aggregate trend or aggregate) and populate the query object types\n          if (aggregateMode === \"None\" && queryAggregateTime === 0) {\n            queryGroups.Data.variablesIdsList.push(variableId);\n          } else if (queryAggregateTime !== 0) {\n            queryGroups.AggregateTrend.variablesIdsList.push(variableId);\n            queryGroups.AggregateTrend.aggregateModesList.push(aggregateMode);\n          } else if ([\"None\", \"MinMaxTrend\", \"Gantt\", \"GanttView\", \"StepDuration\", \"ValueChanges\"].indexOf(aggregateMode) === -1\n            && queryAggregateTime === 0) {\n            queryGroups.Aggregate.variablesIdsList.push(variableId);\n            queryGroups.Aggregate.aggregateModesList.push(aggregateMode);\n          }\n        }\n      }\n\n      resolve({\n        queryGroups: queryGroups,\n        queryVarNameList: queryVarNameList,\n        queryVarIdList: queryVarIdList,\n        queryVarTypeList: queryVarTypeList,\n        fieldNames: fieldNames,\n      });\n\n    });\n\n  }\n\n\n  generateWhereClause(queryWhere: MyQueryWhere, queryVarIdList: string[], grafanaVariables: any) {\n\n    return new Promise((resolve, error) => {\n\n      // init an array of checks for each where clause\n      let whereClauseActive = [false];\n\n      // loop over the where clause items to check if the where clause is active\n      for (let i = 0; i < queryWhere.items.length; i++) {\n        let queryWhereItem = queryWhere.items[i];\n        // if there is an element1 corresponding to a variable name selected\n        if (queryWhereItem.element1 !== \"\") {\n          // if the element2 is not empty could be valid\n          if (queryWhereItem.element2 !== \"\") {\n            whereClauseActive[i] = true;\n          }\n          // check if the element1 name is a grafana variable\n          if (queryWhereItem.element1.startsWith(\"${\") && queryWhereItem.element1.endsWith(\"}\")) {\n            // from ${varname_1} to varname_1\n            let dashboardVar = queryWhereItem.element1.substring(2, queryWhereItem.element1.length - 1);\n            // from varname to [varname] or varname_1 to [varname, 1]\n            let splitDashboardVar = dashboardVar.split(\"_\");\n            // index of the option in the grafana variables list or -1 if no _ is present\n            let grafanaOptionIndex = splitDashboardVar.length > 1 ? Number(splitDashboardVar[splitDashboardVar.length - 1]) : 0;\n            // console.log(\"grafanaOptionIndex\", grafanaOptionIndex);\n            // variable name without index\n            let grafanaVarName = splitDashboardVar.length > 1 ? splitDashboardVar.slice(0, -1).join(\"_\") : splitDashboardVar[0];\n            // console.log(\"grafanaVarName\", grafanaVarName);\n            // get the variable object from the grafana variables list filtering by name\n            let grafanaVar = grafanaVariables.filter((v: any) => v.name === grafanaVarName);\n            // console.log(\"grafanaVar\", grafanaVar);\n            // if the variable is found\n            if (grafanaVar.length > 0) {\n              // based on the variable type get the value of the option\n              if (grafanaVar[0].type === \"textbox\" || grafanaVar[0].type === \"constant\") {\n                queryWhereItem.element1 = grafanaVar[0].current.value;\n                // console.log(\"queryWhereItem.element1\", queryWhereItem.element1);\n              }\n              else if (grafanaVar[0].type === \"query\" || grafanaVar[0].type === \"custom\") {\n                // get the selected option\n                let option = grafanaVar[0].options[grafanaVar[0].includeAll ? grafanaOptionIndex + 1 : grafanaOptionIndex];\n                if (option.selected) {\n                  queryWhereItem.element1 = option.value;\n                  // console.log(\"queryWhereItem.element1\", queryWhereItem.element1);\n                }\n              }\n            }\n            else {\n              // if the option is not selected, the where clause will not be used\n              whereClauseActive[i] = false;\n            }\n          }\n\n          // get the variable id from the name of the element1\n          queryWhereItem.element1 = this.nameIdMaps[queryWhereItem.element1];\n          // check if the element1 id is valid\n          if (queryWhereItem.element1 === undefined) {\n            whereClauseActive[i] = false;\n          }\n\n          // check if the element2 name is a grafana variable\n          let element2IndexStart = queryWhereItem.element2.indexOf(\"${\");\n          let element2IndexEnd = queryWhereItem.element2.indexOf(\"}\");\n          if (element2IndexStart !== -1 && element2IndexEnd !== -1) {\n            // from el2_${varname_1}_chart to varname_1\n            let dashboardVar = queryWhereItem.element2.substring(element2IndexStart + 2, element2IndexEnd);\n            // from varname to [varname] or varname_1 to [varname, 1]\n            let splitDashboardVar = dashboardVar.split(\"_\");\n            // index of the option in the grafana variables list or -1 if no _ is present\n            let grafanaOptionIndex = splitDashboardVar.length > 1 ? Number(splitDashboardVar[splitDashboardVar.length - 1]) : 0;\n            // console.log(\"grafanaOptionIndex\", grafanaOptionIndex);\n            // variable name without index\n            let grafanaVarName = splitDashboardVar.length > 1 ? splitDashboardVar.slice(0, -1).join(\"_\") : splitDashboardVar[0];\n            // console.log(\"grafanaVarName\", grafanaVarName);\n            // get the variable object from the grafana variables list filtering by name\n            let grafanaVar = grafanaVariables.filter((v: any) => v.name === grafanaVarName);\n            // console.log(\"grafanaVar\", grafanaVar);\n            // if the variable is found\n            if (grafanaVar.length > 0) {\n              // based on the variable type get the value of the option\n              if (grafanaVar[0].type === \"textbox\" || grafanaVar[0].type === \"constant\") {\n                queryWhereItem.element2 = queryWhereItem.element2.replace(\"${\" + grafanaVarName + \"}\", grafanaVar[0].current.value);\n                // console.log(\"queryWhereItem.element2\", queryWhereItem.element2);\n              }\n              else if (grafanaVar[0].type === \"query\" || grafanaVar[0].type === \"custom\") {\n                // get the selected option\n                let option = grafanaVar[0].options[grafanaVar[0].includeAll ? grafanaOptionIndex + 1 : grafanaOptionIndex];\n                if (option.selected) {\n                  queryWhereItem.element2 = queryWhereItem.element2.replace(\"${\" + grafanaVarName + \"_\" + grafanaOptionIndex + \"}\", option.value);\n                  // console.log(\"queryWhereItem.element2\", queryWhereItem.element2);\n                }\n                else {\n                  // if the option is not selected, the where clause will not be used\n                  whereClauseActive[i] = false;\n                }\n              }\n            }\n          }\n\n          // but if the element 1 is not in the requested variables list, the where clause will not be used\n          if (queryVarIdList.indexOf(queryWhereItem.element1) === -1) {\n            whereClauseActive[i] = false;\n          }\n        }\n      }\n\n      // check if all the where clause items are true\n      let whereClauseActiveCheck = whereClauseActive.every((check) => check === true);\n      // console.log(\"whereClauseActive\", whereClauseActive);\n      // console.log(\"queryWhere\", queryWhere);\n\n      resolve({\n        whereClauseActiveCheck: whereClauseActiveCheck,\n        whereClauseActive: whereClauseActive,\n        queryWhere: queryWhere\n      });\n\n    });\n\n  }\n\n\n  formatQueryResult(\n    fields: any[],\n    queryFinish: any,\n    queryVarNameList: string[],\n    queryVarIdList: string[],\n    queryVarTypeList: string[],\n    queryOrder: string,\n    queryGroups: QueryGroupObject,\n    whereClauseActiveCheck: boolean,\n    whereClauseActive: boolean[],\n    queryWhere: MyQueryWhere,\n    fieldNames: string[]) {\n\n    return new Promise((resolve, error) => {\n\n      // after loop is finished\n      if (queryFinish) {\n        // init a time buffer for time ordered data and one for where filtered data\n        let timeBuf: number[] = [];\n        let filteredTimeBuf: number[] = [];\n        // init a data buffer for time ordered data and one for where filtered data\n        let dataBuf: any = {};\n        let filteredDataBuf: any = {};\n        // create the data buffer for each variable\n        queryVarNameList.map((name: string) => {\n          dataBuf[name] = []\n          filteredDataBuf[name] = []\n        });\n\n\n        // create an array that contains the indexes of the timestamps buffer\n        let orderedIndexes = Array.from({ length: queryFinish.timeBuffer.length }, (_, index) => index);\n        if (queryOrder === \"Ascending\") {\n          // sort indexes based on timestamps buffer ascending\n          orderedIndexes = orderedIndexes.sort((a, b) => +new Date(queryFinish.timeBuffer[a]) - +new Date(queryFinish.timeBuffer[b]));\n        } else {\n          //sort indexes based on timestamps buffer descending\n          orderedIndexes = orderedIndexes.sort((a, b) => +new Date(queryFinish.timeBuffer[b]) - +new Date(queryFinish.timeBuffer[a]));\n        }\n\n        // create the timestamps buffer ordered by the previous indexes array\n        timeBuf = orderedIndexes.map((idx) => queryFinish.timeBuffer[idx]);\n        // loop over the query variables names list and push the data in the ordered data buffer\n        for (let j = 0; j < queryVarNameList.length; j++) {\n          dataBuf[queryVarNameList[j]] = orderedIndexes.map((idx) => queryFinish.dataBuffer[queryVarNameList[j]][idx]);\n        }\n\n        // check if where clause has to be applied\n        if (whereClauseActiveCheck) {\n          // this array retain the previous where condition\n          let oldWhereConditions: boolean[] = [];\n\n          // an array that contain all variables from aggregate mode list used in the where clause\n          let aggregateModeWhereIds = queryWhere.items\n            .filter((item: any, idx) => whereClauseActive[idx] && queryGroups.Aggregate.variablesIdsList.includes(item.element1))\n            .map((item: any) => item.element1);\n          // the corresponding values of the variables from aggregate mode list used in the where clause\n          let aggregateModeWhereValues = aggregateModeWhereIds\n            .map((el: any) => queryVarIdList.indexOf(el))\n            .map((index: any) => dataBuf[queryVarNameList[index]][dataBuf[queryVarNameList[index]].length - 1]);\n          // console.log(\"aggregateModeWhereIds\", aggregateModeWhereIds);\n          // console.log(\"aggregateModeWhereValues\", aggregateModeWhereValues);\n\n          for (let i = 0; i < timeBuf.length; i++) {\n            // console.log(\"timeBuf[i]\", timeBuf[i]);\n            // console.log(\"oldWhereConditions\", oldWhereConditions);\n            // init an array where each element is the result of each where clause item\n            let whereConditions: boolean[] = [];\n            // loop over the where clause items\n            for (let j = 0; j < queryWhere.items.length; j++) {\n              if (whereClauseActive[j]) {\n                // init the where condition as false\n                whereConditions[j] = false;\n                // get the index of the variable id requested in the where clause\n                let index = queryVarIdList.indexOf(queryWhere.items[j].element1);\n                // if the variable id is found apply the where clause\n                if (index !== -1) {\n                  // get the value of the variable in the data buffer\n                  let value = dataBuf[queryVarNameList[index]][i];\n                  // console.log(\"value\", value);\n                  // get the index of the variable id in the aggregate mode list (if present)\n                  let indexInAggregateModeWhereIds = aggregateModeWhereIds.indexOf(queryWhere.items[j].element1);\n                  // set the value as the last value of the variable in the data buffer\n                  // since aggregate mode variables has only one value\n                  // and the where clause contains a variable from aggregate mode list\n                  // we will find all undefined values in the data buffer until the last value\n                  // in this case if we are querying also the raw data mode no data will be returned\n                  // since the where clause is not satisfied untile last row\n                  if (value === undefined && indexInAggregateModeWhereIds !== -1) {\n                    value = aggregateModeWhereValues[indexInAggregateModeWhereIds];\n                  }\n                  // if the value is undefined and the previous where condition was true, the new condition is true\n                  // this mainly done in case we have a variable as raw and a variable as aggregate where the condition is applied\n                  // to the raw variable and the timestamps are not aligned, so the raw variable will have undefined values\n                  // when the aggregate variable has values\n                  // with this if we say to maintain the previous condition if the new value is undefined\n                  if (value === undefined && oldWhereConditions[j] === true) {\n                    whereConditions[j] = true;\n                  }\n                  // if the value is undefined and is the last line of the data buffer, the new condition is true\n                  // this is done to maintain the last line of the data buffer if the where clause is not satisfied\n                  else if (value === undefined && i === timeBuf.length - 1) {\n                    whereConditions[j] = true;\n                  }\n                  else {\n                    // apply the where to value [comparator] element2\n                    whereConditions[j] = this.applyWhereClause(\n                      value,\n                      queryWhere.items[j].comparator,\n                      queryWhere.items[j].element2,\n                    );\n                  }\n                }\n                // console.log(\"whereConditions\", whereConditions);\n                // save the previous where condition\n                oldWhereConditions = whereConditions;\n              }\n            }\n            // take the first where condition as the result\n            let whereResult = whereConditions[0];\n            // loop over the where conditions and apply the operator to the result and the next condition\n            for (let j = 1; j < whereConditions.length; j++) {\n              // apply the operator to the result and the next condition\n              whereResult =\n                queryWhere.operators[j] === \"and\"\n                  ? whereResult && whereConditions[j]\n                  : whereResult || whereConditions[j];\n            }\n            // console.log(\"whereResult\", whereResult);\n            // if the where result is true or is the last line insert the timestamp and the data in the filtered buffers\n            if (whereResult || i === timeBuf.length - 1) {\n              // console.log(\"aggregateModeVarInWhere\", i === timeBuf.length - 1, queryGroups.Aggregate.variablesIdsList.length > 0\n              //   , queryGroups.Data.variablesIdsList.length > 0, aggregateModeWhereIds.length === 0);c\n\n              // if simply result of where is true\n              if (whereResult) {\n                // push the timestamp in the filtered buffer\n                filteredTimeBuf.push(timeBuf[i]);\n                // loop over the query variables names list and push the data in the filtered buffer\n                for (let j = 0; j < queryVarNameList.length; j++) {\n                  filteredDataBuf[queryVarNameList[j]].push(dataBuf[queryVarNameList[j]][i]);\n                }\n              }\n              // if the where result is false, is the last line, the aggregate mode was used and also the raw data mode is used\n              else if (i === timeBuf.length - 1\n                && queryGroups.Aggregate.variablesIdsList.length > 0\n                && queryGroups.Data.variablesIdsList.length > 0) {\n                // check if the where clause is satisfied for the aggregate mode variables\n                // or if we don't have any aggregate mode variable in the where clause\n                if (aggregateModeWhereIds.map((id: any) =>\n                  whereConditions[queryWhere.items.map((item: any) => item.element1).indexOf(id)]).includes(true)\n                  || aggregateModeWhereIds.length === 0) {\n                  // console.log(\"timeBuf[i]\", timeBuf[i]);\n                  // console.log(\"data\", dataBuf[queryVarNameList[0]][i], dataBuf[queryVarNameList[1]][i]);\n                  // push the timestamp in the filtered buffer\n                  filteredTimeBuf.push(timeBuf[i]);\n                  // loop over the query variables names list and push the data in the filtered buffer\n                  for (let j = 0; j < queryVarNameList.length; j++) {\n                    //console.log(dataBuf[queryVarNameList[j]][i])\n                    // only the variables in aggregate mode list are pushed since the other not satisfy the where clause\n                    if (queryGroups.Aggregate.variablesIdsList.includes(queryVarIdList[j])) {\n                      // check if the where clause is satisfied for the aggregate mode variables\n                      // or if we don't have any aggregate mode variable in the where clause\n                      if (whereConditions[queryWhere.items.map((item: any) => item.element1).indexOf(queryVarIdList[j])]\n                        || aggregateModeWhereIds.length === 0) {\n                        // push the data in the filtered buffer\n                        filteredDataBuf[queryVarNameList[j]].push(dataBuf[queryVarNameList[j]][i]);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          // if where clause is not active, the filtered buffers are equal to the ordered buffers\n          filteredDataBuf = dataBuf;\n          filteredTimeBuf = timeBuf;\n        }\n        // console.log(\"filteredTimeBuf\", filteredTimeBuf);\n        // console.log(\"filteredDataBuf\", filteredDataBuf);\n\n        // insert time in fields using as values the time buffer array ordered by the previous indexes array\n        fields[0] = { name: \"Time\", type: FieldType.time, values: filteredTimeBuf };\n        // loop over the query variables names list and push the data in the ordered data buffer\n        for (let i = 0; i < queryVarNameList.length; i++) {\n          // push it to result fields\n          fields.push({\n            name: fieldNames[i],\n            type: queryVarTypeList[i] === \"String\" ? FieldType.string : FieldType.number,\n            values: filteredDataBuf[queryVarNameList[i]],\n          });\n        }\n      }\n\n      // resolve the result\n      resolve({\n        fields: fields\n      });\n\n    });\n\n  }\n\n\n  async metricFindQuery(query: MyVariableQuery, options?: any) {\n    //console.log(\"metricFindQuery\", query);\n    //console.log(\"options\", options);\n\n    // init grafana response fields\n    let values: any[] = [];\n\n    // check token based on version\n    let tokenCheck = false;\n\n    if (this.isRemote) {\n      // if IED token has expired or empty renew it\n      if (new Date().getTime() > this.remoteTokenExpire || this.remoteToken === \"\") {\n        await this.getRemoteToken();\n        await this.createAssetMap();\n        await this.createVariablesMap();\n        await this.createVariablesOptions();\n        // await this.createVariablesOptionsCascader();\n      }\n      // if IED token exist pass check\n      if (this.remoteToken !== \"\") {\n        tokenCheck = true;\n      }\n    }\n    else {\n      // if is local no need for IED token\n      tokenCheck = true;\n    }\n\n    // if previous check of token was successful\n    if (tokenCheck) {\n      //this.start = new Date().getTime();\n\n      // if grafana variables are used in variablesnames field, replace them\n      let varNamesList = query.variablesNamesList || [];\n      // console.log(\"varNamesList\", varNamesList);\n      // if grafana variables are used in from and to fields, replace them\n      let from = getTemplateSrv().replace(query.from, options.scopedVars);\n      let to = getTemplateSrv().replace(query.to, options.scopedVars);\n      // console.log(\"from\", from);\n      // console.log(\"to\", to);\n      // get the requested order mode\n      let queryOrder = query.order === \"Descending\" ? \"Descending\" : \"Ascending\";\n      // get the list of aliases\n      let aliasesList = query.aliasesList;\n      // get the requested aggregation mode list\n      let queryAggregateModes = query.aggregateModesList;\n      // get the aggregate time in ms\n      let queryAggregateTime = this.aggregateTimeMap[query.aggregateTime];\n      // get the query where clause\n      let queryWhere = query.where || { items: [], operators: [] };\n      // console.log(\"queryWhere\", queryWhere);\n\n      // get the grafana variables\n      let grafanaVariables = getTemplateSrv().getVariables() as any;\n      // console.log(\"grafanaVariables\", grafanaVariables);\n\n      // generate query groups, some lists with variables properties and the field names\n      let fvRes: any = await this.createQueryProperties(\n        varNamesList,\n        grafanaVariables,\n        queryAggregateModes,\n        queryAggregateTime,\n        aliasesList);\n      let queryGroups = fvRes.queryGroups;\n      let queryVarNameList = fvRes.queryVarNameList;\n      let queryVarIdList = fvRes.queryVarIdList;\n      let queryVarTypeList = fvRes.queryVarTypeList;\n      let fieldNames = fvRes.fieldNames;\n      // console.log(queryVarNameList);\n      // console.log(fieldNames);\n      // console.log(queryGroups);\n      // console.log(\"queryWhere\", queryWhere);\n      // based on the query configuration generate the where clause for the query\n      let gwcRes: any = await this.generateWhereClause(queryWhere, queryVarIdList, grafanaVariables);\n      let whereClauseActiveCheck = gwcRes.whereClauseActiveCheck;\n      let whereClauseActive = gwcRes.whereClauseActive;\n      queryWhere = gwcRes.queryWhere;\n      // console.log(\"queryWhere\", queryWhere);\n\n      // check if the from and to are valid and if there is some field to query\n      if (\n        new Date(from).getTime() > 0\n        && new Date(to).getTime() > 0\n        && new Date(from).getTime() < new Date(to).getTime()\n        && fieldNames.length > 0\n      ) {\n        // format dates to ISO string for the query\n        from = new Date(from).toISOString();\n        // if to is greater than now, set it to now\n        to = new Date(to).getTime() > new Date().getTime() ? new Date().toISOString() : new Date(to).toISOString();\n\n        // reset the buffers\n        let dataBuffer: any = {};\n        queryVarNameList.map((name: string) => (dataBuffer[name] = []));\n        let timeBuffer: string[] = [];\n\n        // start the query\n        const queryFinish = await this.queryLoop(\n          timeBuffer,\n          dataBuffer,\n          queryGroups,\n          from,\n          to,\n          queryOrder,\n          queryAggregateTime\n        );\n        // console.log(timeBuffer);\n        // console.log(dataBuffer);\n\n        // based on the data received format them to create the grafana fields to be sent to page\n        let fqRes: any = await this.formatQueryResult(\n          values,\n          queryFinish,\n          queryVarNameList,\n          queryVarIdList,\n          queryVarTypeList,\n          queryOrder,\n          queryGroups,\n          whereClauseActiveCheck,\n          whereClauseActive,\n          queryWhere,\n          fieldNames\n        );\n\n        // console.log(\"fqRes\", fqRes.fields[1]);\n        // format the only field available in the response as a list of values\n        values = fqRes.fields[1].values.map((value: any) => { return { text: value } });\n        // console.log(\"values\", values);\n      }\n    }\n\n    return values;\n  }\n\n\n  async customRequest(url: string,\n    headers: object,\n    method: string,\n    body: object,\n    resType: AllowedRequestType = \"json\",\n    params?: string): Promise<any> {\n    // a custom implementation of the grafana HTTP request that handle all methods than GET\n    const requestHeaders = {\n      ...this.headers,\n      ...headers,\n    };\n    // console.log(\"customrequest\", this.baseUrl, requestHeaders);\n    if (method !== \"get\") {\n      let observableResponse = getBackendSrv().fetch({\n        url: `${url}${params?.length ? `?${params}` : \"\"}`,\n        headers: requestHeaders,\n        method: method,\n        data: body,\n        responseType: resType\n      });\n      return lastValueFrom(observableResponse);\n\n    } else {\n      // if method is get call the custom get request\n      return this.customGetRequest(url, headers, resType, params);\n    }\n  }\n\n\n  async customGetRequest(url: string,\n    headers: object,\n    resType: AllowedRequestType = \"json\",\n    params = \"\"): Promise<any> {\n    // a custom implementation of the grafana HTTP request that handle GET API calls\n    const requestHeaders = {\n      ...this.headers,\n      ...headers,\n    };\n    //url: `${this.baseUrl}${url}${params?.length ? `?${params}` : \"\"}`,\n    let observableResponse = getBackendSrv().fetch({\n      url: `${url}${params?.length ? `?${params}` : \"\"}`,\n      headers: requestHeaders,\n      method: \"get\",\n      responseType: resType\n    });\n\n    return lastValueFrom(observableResponse);\n  }\n\n\n  delay(t: number) {\n    // a dynamic delay function\n    return new Promise((resolve) => setTimeout(resolve, t));\n  }\n\n\n  async testDatasource() {\n    // Called by Save&Test in Datasource config, Checks whether we can connect to the API\n    let defaultErrorMessage = \"Cannot connect to local IIH Essentials, check if the app is running.\";\n\n    try {\n\n      // console.log(\"testDatasource\", this);\n\n      let url = \"\";\n      let headers = {};\n\n      if (this.isRemote) {\n        // set remote url for join as test\n        url = this.apiUrl + \"/iih-essentials\";\n        // check remote token\n        if (this.remoteToken === \"\") {\n          await this.getRemoteToken();\n        }\n        // if remote set remote ied token\n        //headers = { Cookie: \"authToken=\" + this.remoteToken };\n        headers = {\n          \"x-grafana-remotedevice\": this.remoteConfigUrl,\n          \"x-grafana-remotetoken\": this.remoteToken\n        };\n      }\n      else {\n        url = this.apiUrl;\n      }\n\n      // send request\n      const response = await this.customGetRequest(url, headers, \"text\");\n\n      // console.log(\"test datasource response:\", response);\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Success\",\n        };\n      } else {\n        return {\n          status: \"error\",\n          message: response.statusText ? response.statusText : defaultErrorMessage,\n        };\n      }\n\n\n    } catch (err: any) {\n\n      if (_.isString(err)) {\n        return {\n          status: \"error\",\n          message: err,\n        };\n      } else {\n        let message = \"\";\n        message += err.statusText ? err.statusText : defaultErrorMessage;\n        console.log(\"testdatasource error:\", err);\n\n        return {\n          status: \"error\",\n          message,\n        };\n      }\n\n    }\n  }\n\n\n}\n","import _ from \"lodash\";\nimport defaults from 'lodash/defaults';\nimport React, { useState } from 'react';\nimport {\n  MyVariableQuery,\n  aggregateModeOptionsCalculate,\n  aggregateTimeOptions,\n  DEFAULT_QUERY_VARIABLE,\n} from '../types';\nimport { DataSource } from 'datasource';\n\ninterface VariableQueryProps {\n  query: MyVariableQuery;\n  datasource: DataSource;\n  onChange: (query: MyVariableQuery) => void;\n}\n\nexport const VariableQueryEditor = ({ onChange, query, datasource }: VariableQueryProps) => {\n\n  const onNamesChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    //console.log(event.currentTarget.value);\n    // get the new value or empty string\n    let newValue = event.currentTarget.value !== undefined ? event.currentTarget.value : '';\n    // clone the query list and update the value at changed index\n    let newVariablesNamesList = _.cloneDeep(state.variablesNamesList);\n    newVariablesNamesList[0] = newValue;\n    // update the query with new variable row\n    state = {\n      ...state,\n      variablesNamesList: newVariablesNamesList\n    };\n    // call onChange with new query\n    setState({ ...state });\n    saveQuery();\n  };\n\n  const onAggregateModesChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    //console.log(event.currentTarget.value);\n    // get the new value or empty string\n    let newValue = event.currentTarget.value !== undefined ? event.currentTarget.value : 'None';\n    // clone the query list and update the value at changed index\n    let newAggregateModesList = _.cloneDeep(state.aggregateModesList);\n    newAggregateModesList[0] = newValue;\n    // update the query with new variable row\n    state = {\n      ...state,\n      aggregateModesList: newAggregateModesList\n    };\n    // call onChange with new query\n    setState({ ...state });\n    saveQuery();\n  };\n\n  // const onAliasesChange = (event: React.FormEvent<HTMLInputElement>) => {\n  //   //console.log(event.currentTarget.value);\n  //   // get the new value or empty string\n  //   let newValue = event.currentTarget.value !== undefined ? event.currentTarget.value : '';\n  //   // clone the query list and update the value at changed index\n  //   let newAliasesList = _.cloneDeep(state.aliasesList);\n  //   newAliasesList[0] = newValue;\n  //   // update the query with new variable row\n  //   state = {\n  //     ...state,\n  //     aliasesList: newAliasesList\n  //   };\n  //   // call onChange with new query\n  //   setState({ ...state });\n  //   saveQuery();\n  // };\n\n  const onAggregateTimeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    //console.log(event.currentTarget.value);\n    // get the new value or empty string\n    let newValue = event.currentTarget.value !== undefined ? event.currentTarget.value : 'None';\n    // update the query with new variable row\n    state = {\n      ...state,\n      aggregateTime: newValue\n    };\n    // call onChange with new query\n    setState({ ...state });\n    saveQuery();\n  };\n\n  const onDatesChange = (event: React.FormEvent<HTMLInputElement>) => {\n    // update the query with new variable row\n    state = {\n      ...state,\n      [event.currentTarget.name]: event.currentTarget.value,\n    };\n    setState({ ...state });\n    saveQuery();\n  };\n\n  const onNamesFocus = () => {\n    // get the list of available variables from the datasource\n    datasource.createVariablesOptions().then((options) => {\n      //console.log(options);\n      // remove grafana variables from the list\n      options = options.filter((item: any) => {\n        return item.label !== \"Grafana Variables\";\n      });\n      // call onChange with new query\n      setState({ ...state, variablesOptions: options });\n    });\n  };\n\n  const validateQuery = () => {\n    return new Promise((resolve, reject) => {\n      // initialize the validation flag\n      let isValid = true;\n      // check if all required properties are valid\n      if ((state.from || \"\") === \"\") {\n        isValid = false;\n        console.log(\"from is invalid\");\n      }\n      if ((state.to || \"\") === \"\") {\n        isValid = false;\n        console.log(\"to is invalid\");\n      }\n      if (state.variablesNamesList.length === 0) {\n        isValid = false;\n        console.log(\"variablesNamesList is invalid\");\n      }\n      if (state.variablesNamesList.length !== state.aggregateModesList.length) {\n        isValid = false;\n        console.log(\"variablesNamesList and aggregateModesList are not equal length\");\n      }\n      // if (state.variablesNamesList.length !== state.aliasesList.length) {\n      //   isValid = false;\n      //   console.log(\"variablesNamesList and aliasesList are not equal length\");\n      // }\n      if (state.variablesNamesList.includes(\"\")) {\n        isValid = false;\n        console.log(\"variablesNamesList includes empty strings\");\n      }\n\n      // console.log(\"is valid\", isValid);\n      // return the validation result as a promise\n      resolve(isValid);\n    });\n  };\n\n  const saveQuery = () => {\n    // onChange(state);\n    validateQuery().then((isValid) => {\n      if (isValid) { onChange(state); }\n    });\n  };\n\n\n  let [state, setState] = useState(defaults(query, DEFAULT_QUERY_VARIABLE));\n\n\n  return (\n    <>\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">From</span>\n        <input\n          name=\"from\"\n          className=\"gf-form-input width-20\"\n          onChange={onDatesChange}\n          value={state.from || \"${__from:date}\"}\n        />\n      </div>\n\n      <div className=\"gf-form\">\n      <span className=\"gf-form-label width-10\">To</span>\n        <input\n          name=\"to\"\n          className=\"gf-form-input width-20\"\n          onChange={onDatesChange}\n          value={state.to || \"${__to:date}\"}\n        />\n      </div>\n\n      {/* <div className=\"gf-form\">\n        <span className=\"gf-form-label width-30\">Variable</span>\n        <span className=\"gf-form-label width-10\">Acquisition Mode</span>\n        <span className=\"gf-form-label width-20\">Alias</span>\n      </div> */}\n\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Variable</span>\n        <select\n          className='gf-form-select-wrapper width-30'\n          onChange={onNamesChange}\n          onFocus={onNamesFocus}\n          value={state.variablesOptions.find((o: any) => o.value === state.variablesNamesList[0])?.value || \"\"}\n        >\n          {state.variablesOptions.map((item, index) => {\n            return (\n              <option key={index} value={item.value}>{item.label}</option>\n            )\n          })}\n        </select>\n      </div>\n\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Acquisition Mode</span>\n        <select\n          className='gf-form-select-wrapper width-20'\n          onChange={onAggregateModesChange}\n          value={aggregateModeOptionsCalculate.find((o: any) => o.value === state.aggregateModesList[0])?.value || \"\"}\n        >\n          {aggregateModeOptionsCalculate.map((item, index) => {\n            return (\n              <option key={index} value={item.value}>{item.label}</option>\n            )\n          })}\n        </select>\n        {/* <input\n          width={30}\n          name=\"Alias\"\n          className=\"gf-form-input width-20\"\n          onChange={onAliasesChange}\n          value={state.aliasesList[0] || \"\"}\n        /> */}\n      </div>\n\n      <div className=\"gf-form\">\n        <span className=\"gf-form-label width-10\">Aggregate Time</span>\n        <select\n          className='gf-form-select-wrapper width-20'\n          onChange={onAggregateTimeChange}\n          value={aggregateTimeOptions.find((o: any) => o.value === state.aggregateTime)?.value || \"\"}\n        >\n          {aggregateTimeOptions.map((item, index) => {\n            return (\n              <option key={index} value={item.value}>{item.label}</option>\n            )\n          })}\n        </select>\n      </div>\n\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { VariableQueryEditor } from './components/VariableQueryEditor';\n\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableQueryEditor);\n\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input, SecretInput, InlineSwitch } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> { }\n\nexport function ConfigEditor(props: Props) {\n\n  const { onOptionsChange, options } = props;\n\n  const onURLChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      remoteUrl: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  const onIsRemoteChange = (event: ChangeEvent<HTMLInputElement>) => {\n    //console.log(event.target.value, event.target.checked);\n    const jsonData = {\n      ...options.jsonData,\n      isRemote: Boolean(event.target.checked),\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  const onRemoteUserChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      remoteUser: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  const onRemotePasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      remotePassword: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n\n  const { jsonData } = options;\n\n  return (\n    <div className=\"gf-form-group\">\n\n      <InlineField label=\"IIH Essentials on a remote IED?\"\n        labelWidth={48}\n        tooltip=\"Is IIH Essentials App installed on a different IED?\">\n        <InlineSwitch label=\"Remote IED\"\n          showLabel={true}\n          value={jsonData.isRemote}\n          onChange={onIsRemoteChange} />\n      </InlineField>\n\n      <InlineField label=\"Remote IED URL\"\n        labelWidth={25}\n        disabled={jsonData.isRemote ? false : true}\n        tooltip=\"If IIH Essentials is installed on \n        a Remote IED then insert here its IP or FQDN (e.g. ).\">\n        <Input\n          onChange={onURLChange}\n          value={jsonData.remoteUrl || \"\"}\n          placeholder=\"Insert IP Address or FQDN of Remote IED\"\n          width={40}\n        />\n      </InlineField>\n\n      <InlineField label=\"Remote IED User\"\n        labelWidth={25}\n        disabled={jsonData.isRemote ? false : true}\n        tooltip=\"IED Login User that can access \n        Remote IED where IIH Essentials App is installed.\">\n        <Input\n          onChange={onRemoteUserChange}\n          value={jsonData.remoteUser || \"\"}\n          width={40}\n        />\n      </InlineField>\n\n      <InlineField label=\"Remote IED Password\"\n        labelWidth={25}\n        disabled={jsonData.isRemote ? false : true}\n        tooltip=\"IED Login User that can access \n        Remote IED where IIH Essentials App is installed.\">\n        <SecretInput\n          onChange={(event: ChangeEvent<HTMLInputElement>) => onRemotePasswordChange(event)}\n          onReset={() => { return \"\"; }}\n          isConfigured={false}\n          value={jsonData.remotePassword || \"\"}\n          width={40}\n        />\n      </InlineField>\n\n    </div>\n  );\n}\n","import _ from \"lodash\";\nimport defaults from 'lodash/defaults';\nimport React, { ChangeEvent, MouseEvent } from 'react';\nimport {\n  InlineField,\n  Input,\n  Select,\n  InlineLabel,\n  IconButton,\n} from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport {\n  DEFAULT_QUERY,\n  MyDataSourceOptions,\n  MyQuery,\n  orderOptions,\n  aggregateModeOptions,\n  aggregateModeOptionsCalculate,\n  aggregateTimeOptions,\n  whereComparatorOptions,\n  whereOperatorOptions,\n  whereComparatorType,\n  whereOperatorType,\n  MyQueryWhereItem\n} from '../types';\n\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\n\nexport function QueryEditor({ query, onChange, onRunQuery, datasource }: Props) {\n\n  const onFromChange = (event: ChangeEvent<HTMLInputElement>) => {\n    // update the query with new value\n    query = { ...query, from: event.target.value };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onToChange = (event: ChangeEvent<HTMLInputElement>) => {\n    // update the query with new value\n    query = { ...query, to: event.target.value };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onNamesChange = (item: SelectableValue<string>, index: number) => {\n    // get the new value or default None mode\n    let newValue = item.value !== undefined ? item.value : '';\n    // clone the query list and update the value at changed index\n    let newVariablesNamesList = _.cloneDeep(query.variablesNamesList);\n    newVariablesNamesList[index] = newValue;\n    query = { ...query, variablesNamesList: newVariablesNamesList };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n    //}\n  };\n\n  const onAggregateModesChange = (item: SelectableValue<string>, index: number) => {\n    // get the new value or default None mode\n    let newValue = item.value !== undefined ? item.value : 'None';\n    // clone the query list and update the value at changed index\n    let newAggregateModesList = _.cloneDeep(query.aggregateModesList);\n    newAggregateModesList[index] = newValue;\n    // update the query with new value\n    query = { ...query, aggregateModesList: newAggregateModesList };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onAliasesChange = (event: ChangeEvent<HTMLInputElement>, index: number) => {\n    // get the new value or empty string\n    let newValue = event.target.value !== undefined ? event.target.value : '';\n    // clone the query list and update the value at changed index\n    let newAliasesList = _.cloneDeep(query.aliasesList);\n    newAliasesList[index] = newValue;\n    // update the query with new value\n    query = { ...query, aliasesList: newAliasesList };\n    // call onChange with new query\n    onChange({ ...query });\n  };\n\n  const onAliasesBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onWhereElement1Change = (item: SelectableValue<string>, index: number) => {\n    // get the new value or empty string\n    let newValue = item.value !== undefined ? item.value : '';\n    // clone the query where obj and update the value at changed index\n    let newWhere = _.cloneDeep(query.where);\n    newWhere.items[index].element1 = newValue;\n    // update the query with new value\n    query = { ...query, where: newWhere };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onWhereComparatorChange = (item: SelectableValue<whereComparatorType>, index: number) => {\n    // get the new value or empty string\n    let newValue: whereComparatorType = item.value !== undefined ? item.value : '=';\n    // clone the query where obj and update the value at changed index\n    let newWhere = _.cloneDeep(query.where);\n    newWhere.items[index].comparator = newValue;\n    // update the query with new value\n    query = { ...query, where: newWhere };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onWhereElement2Change = (event: ChangeEvent<HTMLInputElement>, index: number) => {\n    // get the new value or empty string\n    let newValue = event.target.value !== undefined ? event.target.value : '';\n    // clone the query where obj and update the value at changed index\n    let newWhere = _.cloneDeep(query.where);\n    newWhere.items[index].element2 = newValue;\n    // update the query with new value\n    query = { ...query, where: newWhere };\n    // call onChange with new query\n    onChange({ ...query });\n  };\n\n  const onWhereOperatorChange = (item: SelectableValue<whereOperatorType>, index: number) => {\n    // get the new value or empty string\n    let newValue: whereOperatorType = item.value !== undefined ? item.value : '';\n    // clone the query where obj and update the value at changed index\n    let newWhere = _.cloneDeep(query.where);\n    newWhere.operators[index] = newValue;\n    // update the query with new value\n    query = { ...query, where: newWhere };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onWhereElement2Blur = (event: ChangeEvent<HTMLInputElement>) => {\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onOrderChange = (item: SelectableValue<string>) => {\n    // get the new value or default ascending mode\n    let newValue = item.value !== undefined ? item.value : 'Ascending';\n    // update the query with new value\n    query = { ...query, order: newValue };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onAggregateTimeChange = (item: SelectableValue<string>) => {\n    // get the new value or default None mode\n    let newValue = item.value !== undefined ? item.value : 'None';\n    // update the query with new value\n    query = { ...query, aggregateTime: newValue };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onNamesOpenMenu = (index: number) => {\n    // get the list of available variables from the datasource\n    datasource.createVariablesOptions().then((options) => {\n      //console.log(options);\n      // update the query with new value\n      query = { ...query, variablesOptions: options };\n      // call onChange with new query\n      onChange({ ...query });\n    });\n  };\n\n  const onwhereElement1OpenMenu = (index: number) => {\n    // remove duplicates from the list\n    let filteredVariablesNamesList = query.variablesNamesList.filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    });\n    // get the list of available variables names from already populated variablesOptions\n    let newVariablesNamesList = filteredVariablesNamesList.map((item: string) => {\n      return { \"label\": item, \"value\": item }\n    }) as Array<SelectableValue<string>>;\n    // // if index is the first push an empty string\n    // if (index === 0) {\n    //   newVariablesNamesList.unshift({ \"label\": \"\", \"value\": \"\" });\n    // }\n    // update the query with new value\n    query = { ...query, variablesNamesListOptions: newVariablesNamesList };\n    // call onChange with new query\n    onChange({ ...query });\n  };\n\n  const onAddVariableClick = (event: MouseEvent<HTMLButtonElement>) => {\n    // clone all query lists and add a new empty row\n    let newVariablesNamesList = _.cloneDeep(query.variablesNamesList);\n    newVariablesNamesList.push(\"\");\n    let newAggregateModesList = _.cloneDeep(query.aggregateModesList);\n    newAggregateModesList.push(\"None\");\n    let newAliasesList = _.cloneDeep(query.aliasesList);\n    newAliasesList.push(\"\");\n    // update the query with new variable row\n    query = {\n      ...query,\n      variablesNamesList: newVariablesNamesList, aggregateModesList: newAggregateModesList, aliasesList: newAliasesList\n    };\n    // call onChange with new query\n    onChange({ ...query });\n  };\n\n  const onDeleteVariableClick = (event: MouseEvent<HTMLButtonElement>, index: number) => {\n    // console.log(index);\n    // clone all query lists and delete the row at index\n    let newVariablesNamesList = _.cloneDeep(query.variablesNamesList);\n    newVariablesNamesList.splice(index, 1);\n    let newAggregateModesList = _.cloneDeep(query.aggregateModesList);\n    newAggregateModesList.splice(index, 1);\n    let newAliasesList = _.cloneDeep(query.aliasesList);\n    newAliasesList.splice(index, 1);\n    // update the query with new variable row\n    query = {\n      ...query,\n      variablesNamesList: newVariablesNamesList, aggregateModesList: newAggregateModesList, aliasesList: newAliasesList\n    };\n    // call onChange with new query\n    onChange({ ...query });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const onAddWhereClick = (event: MouseEvent<HTMLButtonElement>) => {\n    // clone query where list and add a new empty row\n    let newWhere = _.cloneDeep(query.where);\n    newWhere.items.push({ element1: '', comparator: '=', element2: '' });\n    // add a new operator to the list\n    newWhere.operators.push(newWhere.items.length > 1 ? \"and\" : \"\");\n    // update the query with new variable row\n    query = { ...query, where: newWhere };\n    // call onChange with new query\n    onChange({ ...query });\n  };\n\n  const onDeleteWhereClick = (event: MouseEvent<HTMLButtonElement>, index: number) => {\n    // console.log(index);\n    // clone query where list and remove row at index\n    let newWhere = _.cloneDeep(query.where);\n    newWhere.items.splice(index, 1);\n    // remove the operator at index\n    newWhere.operators.splice(index, 1);\n    // call onChange with new query\n    onChange({ ...query, where: newWhere });\n    // validate the query and run the query if all properties are valid\n    validateQuery().then((isValid) => {\n      if (isValid) { onRunQuery(); }\n    });\n  };\n\n  const validateQuery = () => {\n    return new Promise((resolve, reject) => {\n      // console.log(\"valquery\", query);\n      // initialize the validation flag\n      let isValid = true;\n      // check if all required properties are valid\n      if ((query.from || \"\") === \"\") {\n        isValid = false;\n        console.log(\"from is invalid\");\n      }\n      if ((query.to || \"\") === \"\") {\n        isValid = false;\n        console.log(\"to is invalid\");\n      }\n      if (query.variablesNamesList.length === 0) {\n        isValid = false;\n        console.log(\"variablesNamesList is invalid\");\n      }\n      if (query.variablesNamesList.length !== query.aggregateModesList.length) {\n        isValid = false;\n        console.log(\"variablesNamesList and aggregateModesList are not equal length\");\n      }\n      if (query.variablesNamesList.length !== query.aliasesList.length) {\n        isValid = false;\n        console.log(\"variablesNamesList and aliasesList are not equal length\");\n      }\n      if (query.variablesNamesList.includes(\"\")) {\n        isValid = false;\n        console.log(\"variablesNamesList includes empty strings\");\n      }\n      // query.where.items.forEach((where: MyQueryWhereItem) => {\n      //   if (where.element1 === \"\" && where.element2 !== \"\") {\n      //     isValid = false;\n      //     console.log(\"where is invalid\");\n      //   }\n      //   if (where.element1 !== \"\" && where.element2 === \"\") {\n      //     isValid = false;\n      //     console.log(\"where is invalid\");\n      //   }\n      // });\n\n      // console.log(\"is valid\", isValid);\n      // return the validation result as a promise\n      resolve(isValid);\n    });\n  };\n\n\n  // get the query properties or default values\n  const {\n    from,\n    to,\n    order,\n    variablesNamesList,\n    variablesOptions,\n    aliasesList,\n    aggregateModesList,\n    aggregateTime,\n    where,\n    variablesNamesListOptions\n  } = defaults(query, DEFAULT_QUERY);\n\n\n\n  return (\n    <>\n      <div className=\"gf-form\">\n        <InlineField label=\"From\"\n          labelWidth={20}\n          tooltip=\"Start datetime for query.\"\n          invalid={(from || \"\") === \"\"}\n          error={(from || \"\") === \"\" ? 'Please insert a valid query start time.' : ''}>\n          <Input\n            width={30}\n            onChange={onFromChange}\n            value={from || \"\"}\n            type=\"text\" />\n        </InlineField>\n        <InlineField label=\"To\"\n          labelWidth={20}\n          tooltip=\"End datetime for query.\"\n          invalid={(to || \"\") === \"\"}\n          error={(to || \"\") === \"\" ? 'Please insert a valid query end time.' : ''}>\n          <Input\n            width={30}\n            onChange={onToChange}\n            value={to || \"${__from:date}\"}\n            type=\"text\" />\n        </InlineField>\n      </div>\n\n\n      <div className=\"gf-form\">\n        <InlineLabel width={50}\n          tooltip=\"Variables Names to be queried from database.\">\n          Variables\n        </InlineLabel>\n        <InlineLabel width={20}\n          tooltip=\"Aggregation function applied on data.\n        When Aggregate Time is set to None the following \n        aggregation functions are not available: \n        MinMaxTrend, Gantt, GanttView, StepDuration, ValueChanges.\">\n          Acquisition Mode\n        </InlineLabel>\n        <InlineLabel width={30}\n          tooltip=\"Aliases to be applied on the Variables Names.\">\n          Aliases\n        </InlineLabel>\n      </div>\n\n      <div>\n        {aggregateModesList.map((mode: string, index: number) => {\n          return (\n            <div className=\"gf-form\" key={index}>\n              <Select\n                width={50}\n                menuPlacement=\"top\"\n                allowCustomValue={false}\n                options={variablesOptions}\n                onOpenMenu={() => onNamesOpenMenu(index)}\n                value={variablesOptions.find((item) => item.value === variablesNamesList[index])}\n                onChange={(v: any) => onNamesChange(v, index)}\n              />\n\n              <Select\n                width={20}\n                menuPlacement=\"top\"\n                allowCustomValue={false}\n                options={aggregateTime === \"None\"\n                  ? aggregateModeOptionsCalculate\n                  : aggregateModeOptions}\n                value={aggregateTime === \"None\"\n                  ? aggregateModeOptionsCalculate.find((item) => item.value === mode)\n                  : aggregateModeOptions.find((item) => item.value === mode)}\n                onChange={(v: any) => onAggregateModesChange(v, index)}\n              />\n\n              <Input\n                width={30}\n                onChange={(v: any) => onAliasesChange(v, index)}\n                onBlur={onAliasesBlur}\n                value={aliasesList[index]}\n                placeholder=\"Insert an Alias Name for the Variable\"\n                type=\"text\" />\n\n              <InlineField label=\"\" labelWidth={10} grow={true} style={{ alignItems: 'center', flex: 1 }}>\n                {index === 0 && aggregateModesList.length === 1\n                  ? (<span></span>)\n                  : (<IconButton name=\"trash-alt\" size=\"xl\" variant=\"destructive\" onClick={(v: any) => onDeleteVariableClick(v, index)} />)}\n              </InlineField>\n\n            </div>\n          )\n        })}\n\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineField label=\"\" labelWidth={10} grow={true} style={{ alignItems: 'center', flex: 1 }}>\n          <IconButton name=\"plus\" size=\"xl\" variant=\"secondary\" onClick={onAddVariableClick} />\n        </InlineField>\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineLabel width={100}\n          tooltip=\"A where clause to be applied on the query.\">\n          Where\n        </InlineLabel>\n      </div>\n\n      <div>\n        {where.items.map((whereItem: MyQueryWhereItem, index: number) => {\n          return (\n            <div className=\"gf-form\" key={index}>\n\n              {index > 0\n                ? <Select\n                  width={10}\n                  menuPlacement=\"top\"\n                  allowCustomValue={false}\n                  options={whereOperatorOptions}\n                  value={whereOperatorOptions.find((item) => item.value === where.operators[index])}\n                  onChange={(v: any) => onWhereOperatorChange(v, index)}\n                />\n                : <InlineLabel width={9.5}>&#8203;</InlineLabel>}\n\n              <Select\n                width={50}\n                menuPlacement=\"top\"\n                allowCustomValue={false}\n                options={variablesNamesListOptions}\n                onOpenMenu={() => onwhereElement1OpenMenu(index)}\n                value={variablesNamesList.find((item) => item === whereItem.element1)}\n                onChange={(v: any) => onWhereElement1Change(v, index)}\n              />\n\n              <Select\n                width={17}\n                menuPlacement=\"top\"\n                allowCustomValue={false}\n                options={whereComparatorOptions}\n                value={whereComparatorOptions.find((item) => item.value === whereItem.comparator)}\n                onChange={(v: any) => onWhereComparatorChange(v, index)}\n              />\n\n              <Input\n                width={23}\n                onChange={(v: any) => onWhereElement2Change(v, index)}\n                onBlur={onWhereElement2Blur}\n                value={whereItem.element2}\n                type=\"text\" />\n\n              <InlineField label=\"\" labelWidth={10} grow={true} style={{ alignItems: 'center', flex: 1 }}>\n                <IconButton name=\"trash-alt\" size=\"xl\" variant=\"destructive\" onClick={(v: any) => onDeleteWhereClick(v, index)} />\n              </InlineField>\n            </div>\n          )\n        })}\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineField label=\"\" labelWidth={10} grow={true} style={{ alignItems: 'center', flex: 1 }}>\n          <IconButton name=\"plus\" size=\"xl\" variant=\"secondary\" onClick={onAddWhereClick} />\n        </InlineField>\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineField label=\"Aggregate Time\"\n          labelWidth={20}\n          tooltip=\"Time groups for data aggregation.\n            Using None will return raw values.\">\n          <Select\n            width={20}\n            menuPlacement=\"top\"\n            allowCustomValue={false}\n            options={aggregateTimeOptions}\n            value={aggregateTimeOptions.find((item) => item.value === aggregateTime)}\n            onChange={onAggregateTimeChange}\n          />\n        </InlineField>\n\n        <InlineField label=\"Order\"\n          labelWidth={20}\n          onLoad={onRunQuery}\n          tooltip=\"Data ordering could be Ascending or Descending.\">\n          <Select\n            width={20}\n            menuPlacement=\"bottom\"\n            allowCustomValue={false}\n            options={orderOptions}\n            value={orderOptions.find((item) => item.value === order)}\n            onChange={onOrderChange}\n          />\n        </InlineField>\n      </div>\n\n    </>\n  );\n}\n"],"names":["Symbol","module","exports","func","thisArg","args","length","call","apply","baseTimes","isArguments","isArray","isBuffer","isIndex","isTypedArray","hasOwnProperty","Object","prototype","value","inherited","isArr","isArg","isBuff","isType","skipIndexes","result","String","key","push","getRawTag","objectToString","symToStringTag","toStringTag","undefined","baseGetTag","isObjectLike","isFunction","isMasked","isObject","toSource","reIsHostCtor","funcProto","Function","objectProto","funcToString","toString","reIsNative","RegExp","replace","test","isLength","typedArrayTags","isPrototype","nativeKeysIn","object","isProto","identity","overRest","setToString","start","constant","defineProperty","baseSetToString","string","n","iteratee","index","Array","coreJsData","getNative","e","freeGlobal","g","baseIsNative","getValue","nativeObjectToString","isOwn","tag","unmasked","reIsUint","type","eq","isArrayLike","uid","maskSrcKey","exec","keys","IE_PROTO","Ctor","constructor","freeExports","nodeType","freeModule","freeProcess","process","nodeUtil","require","types","binding","nativeMax","Math","max","transform","arguments","array","otherArgs","this","freeSelf","self","root","shortOut","nativeNow","Date","now","count","lastCalled","stamp","remaining","baseRest","isIterateeCall","keysIn","defaults","sources","guard","source","props","propsIndex","propsLength","other","baseIsArguments","propertyIsEnumerable","stubFalse","Buffer","baseIsTypedArray","baseUnary","nodeIsTypedArray","arrayLikeKeys","baseKeysIn","__WEBPACK_EXTERNAL_MODULE__7781__","__WEBPACK_EXTERNAL_MODULE__8531__","__WEBPACK_EXTERNAL_MODULE__2007__","__WEBPACK_EXTERNAL_MODULE__3241__","__WEBPACK_EXTERNAL_MODULE__5959__","__WEBPACK_EXTERNAL_MODULE__1269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","getter","__esModule","d","a","definition","o","enumerable","get","globalThis","window","obj","prop","r","nmd","paths","children","DEFAULT_QUERY","from","to","order","variablesNamesList","variablesOptions","aggregateModesList","aliasesList","aggregateTime","where","items","operators","variablesNamesListOptions","DEFAULT_QUERY_VARIABLE","whereComparatorOptions","label","whereOperatorOptions","orderOptions","aggregateModeOptions","aggregateModeOptionsCalculate","aggregateTimeOptions","aggregateTimeMap","DataSource","DataSourceApi","initPlugin","isRemote","apiUrl","baseUrl","remoteRoute","getRemoteToken","localRoute","createAssetMap","createVariablesMap","createVariablesOptions","error","console","log","Promise","resolve","url","headers","remoteConfigUrl","customRequest","getRemoteTokenBody","then","res","remoteToken","data","access_token","remoteTokenExpire","expires_in","err","customGetRequest","idAssetsMap","idAssetsList","i","assets","asset","assetId","hasParent","parents","parentsNames","name","parentId","unshift","j","idAssetMaps","variables","assetTreeName","join","varName","variableName","nameIdMaps","variableId","idNameMaps","nameTypeMaps","dataType","grafanaVariables","getTemplateSrv","getVariables","options","numOptions","includeAll","tmpVarOptions","sort","b","localeCompare","concat","applyWhereClause","comparator","element2","Number","includes","startsWith","endsWith","queryData","timeBuffer","dataBuffer","ids","queryParams","datapoints","tIndex","queryVarName","values","indexOf","timestamp","queryFinished","queryFrom","hasMoreData","queryTo","queryDataAggregateTrend","aggregateModes","baseAggregateBody","aggregateBaseBody","aggregateBody","calculationTimeRange","dataSources","aggregation","dataSource","queryDataAggregate","queryLoop","queryObject","tBuf","dBuf","queryGroups","queryGroupName","Data","variablesIdsList","delay","catch","AggregateTrend","Aggregate","query","promises","targets","map","target","fields","tokenCheck","getTime","varNamesList","scopedVars","queryOrder","queryAggregateModes","queryAggregateTime","queryWhere","fvRes","createQueryProperties","queryVarNameList","queryVarIdList","queryVarTypeList","fieldNames","gwcRes","generateWhereClause","whereClauseActiveCheck","whereClauseActive","toISOString","queryFinish","formatQueryResult","MutableDataFrame","refId","all","splitDashboardVar","substring","split","grafanaOptionIndex","grafanaVarName","slice","grafanaVar","filter","v","current","option","selected","aggregateMode","alias","aliasIndexStart","aliasIndexEnd","fieldName","queryWhereItem","element1","element2IndexStart","element2IndexEnd","every","check","timeBuf","filteredTimeBuf","dataBuf","filteredDataBuf","orderedIndexes","_","idx","oldWhereConditions","aggregateModeWhereIds","item","aggregateModeWhereValues","el","whereConditions","indexInAggregateModeWhereIds","whereResult","FieldType","time","number","metricFindQuery","text","method","body","resType","params","requestHeaders","observableResponse","getBackendSrv","fetch","responseType","lastValueFrom","t","setTimeout","testDatasource","defaultErrorMessage","response","status","message","statusText","instanceSettings","super","remoteUser","remotePassword","variablesOptionsCascader","jsonData","remoteUrl","userName","passWord","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","div","className","InlineField","labelWidth","tooltip","InlineSwitch","showLabel","onChange","event","Boolean","checked","disabled","Input","placeholder","width","SecretInput","onRemotePasswordChange","onReset","isConfigured","setQueryEditor","onRunQuery","datasource","onAliasesBlur","validateQuery","isValid","onWhereElement2Blur","reject","invalid","InlineLabel","mode","Select","menuPlacement","allowCustomValue","onOpenMenu","find","newValue","newVariablesNamesList","onNamesChange","newAggregateModesList","onAggregateModesChange","newAliasesList","onAliasesChange","onBlur","grow","style","alignItems","flex","span","IconButton","size","variant","onClick","splice","onDeleteVariableClick","whereItem","newWhere","onWhereOperatorChange","filteredVariablesNamesList","onwhereElement1OpenMenu","onWhereElement1Change","onWhereComparatorChange","onWhereElement2Change","onDeleteWhereClick","onLoad","setVariableQueryEditor","state","onDatesChange","currentTarget","setState","saveQuery","useState","input","select","onFocus"],"sourceRoot":""}